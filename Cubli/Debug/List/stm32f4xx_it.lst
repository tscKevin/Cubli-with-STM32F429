###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         15/Jul/2020  23:06:53
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\stm32f4xx_it.c
#    Command line =
#        -f C:\Users\Evan\AppData\Local\Temp\EW61D9.tmp
#        (E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\stm32f4xx_it.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -lC
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\List
#        -o
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\iar\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\inc\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\
#        -Ol --use_c++_inline -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\List\stm32f4xx_it.lst
#    Object file  =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\Obj\stm32f4xx_it.o
#
###############################################################################

E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Templates/stm32f4xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.8.0
      6            * @date    04-November-2016
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm32f4xx_it.h"
     32          //#include "main.h"
     33          
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          /* Private define ------------------------------------------------------------*/
     40          /* Private macro -------------------------------------------------------------*/
     41          /* Private variables ---------------------------------------------------------*/
     42          /* Private function prototypes -----------------------------------------------*/
     43          /* Private functions ---------------------------------------------------------*/
     44          
     45          /******************************************************************************/
     46          /*            Cortex-M4 Processor Exceptions Handlers                         */
     47          /******************************************************************************/
     48          
     49          /**
     50            * @brief  This function handles NMI exception.
     51            * @param  None
     52            * @retval None
     53            */

   \                                 In section .text, align 2, keep-with-next
     54          void NMI_Handler(void)
     55          {
     56          }
   \                     NMI_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     57          
     58          /**
     59            * @brief  This function handles Hard Fault exception.
     60            * @param  None
     61            * @retval None
     62            */

   \                                 In section .text, align 2, keep-with-next
     63          void HardFault_Handler(void)
     64          {
     65            /* Go to infinite loop when Hard Fault exception occurs */
     66            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??HardFault_Handler_0
     67            {
     68            }
     69          }
     70          
     71          /**
     72            * @brief  This function handles Memory Manage exception.
     73            * @param  None
     74            * @retval None
     75            */

   \                                 In section .text, align 2, keep-with-next
     76          void MemManage_Handler(void)
     77          {
     78            /* Go to infinite loop when Memory Manage exception occurs */
     79            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??MemManage_Handler_0
     80            {
     81            }
     82          }
     83          
     84          /**
     85            * @brief  This function handles Bus Fault exception.
     86            * @param  None
     87            * @retval None
     88            */

   \                                 In section .text, align 2, keep-with-next
     89          void BusFault_Handler(void)
     90          {
     91            /* Go to infinite loop when Bus Fault exception occurs */
     92            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??BusFault_Handler_0
     93            {
     94            }
     95          }
     96          
     97          /**
     98            * @brief  This function handles Usage Fault exception.
     99            * @param  None
    100            * @retval None
    101            */

   \                                 In section .text, align 2, keep-with-next
    102          void UsageFault_Handler(void)
    103          {
    104            /* Go to infinite loop when Usage Fault exception occurs */
    105            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??UsageFault_Handler_0
    106            {
    107            }
    108          }
    109          
    110          /**
    111            * @brief  This function handles SVCall exception.
    112            * @param  None
    113            * @retval None
    114            */

   \                                 In section .text, align 2, keep-with-next
    115          void SVC_Handler(void)
    116          {
    117          }
   \                     SVC_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    118          
    119          /**
    120            * @brief  This function handles Debug Monitor exception.
    121            * @param  None
    122            * @retval None
    123            */

   \                                 In section .text, align 2, keep-with-next
    124          void DebugMon_Handler(void)
    125          {
    126          }
   \                     DebugMon_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    127          
    128          /**
    129            * @brief  This function handles PendSVC exception.
    130            * @param  None
    131            * @retval None
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          void PendSV_Handler(void)
    134          {
    135          }
   \                     PendSV_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    136          
    137          /**
    138            * @brief  This function handles SysTick Handler.
    139            * @param  None
    140            * @retval None
    141            */
    142          //void SysTick_Handler(void)
    143          //{
    144          ////  TimingDelay_Decrement();
    145          //}
    146          
    147          /******************************************************************************/
    148          /*                 STM32F4xx Peripherals Interrupt Handlers                   */
    149          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    150          /*  available peripheral interrupt handler's name please refer to the startup */
    151          /*  file (startup_stm32f4xx.s).                                               */
    152          /******************************************************************************/
    153          
    154          /**
    155            * @brief  This function handles PPP interrupt request.
    156            * @param  None
    157            * @retval None
    158            */
    159          /*void PPP_IRQHandler(void)
    160          {
    161          }*/
    162          
    163          /**
    164            * @}
    165            */ 
    166          
    167          
    168          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  BusFault_Handler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
       2  UsageFault_Handler

 
 16 bytes in section .text
 
 16 bytes of CODE memory

Errors: none
Warnings: none
