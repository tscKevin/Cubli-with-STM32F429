###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         14/Jul/2020  18:42:04
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c
#    Command line =
#        -f C:\Users\Evan\AppData\Local\Temp\EW981A.tmp
#        (E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -lC
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\List
#        -o
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\iar\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\inc\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\
#        -Ol --use_c++_inline -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\List\stm32f4xx_gpio.lst
#    Object file  =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\Obj\stm32f4xx_gpio.o
#
###############################################################################

E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.8.0
      6            * @date    04-November-2016
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the GPIO peripheral:           
      9            *           + Initialization and Configuration
     10            *           + GPIO Read and Write
     11            *           + GPIO Alternate functions configuration
     12            * 
     13          @verbatim  
     14           ===============================================================================
     15                                ##### How to use this driver #####
     16           ===============================================================================       
     17           [..]             
     18             (#) Enable the GPIO AHB clock using the following function
     19                 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
     20                         
     21             (#) Configure the GPIO pin(s) using GPIO_Init()
     22                 Four possible configuration are available for each pin:
     23                 (++) Input: Floating, Pull-up, Pull-down.
     24                 (++) Output: Push-Pull (Pull-up, Pull-down or no Pull)
     25                      Open Drain (Pull-up, Pull-down or no Pull). In output mode, the speed 
     26                      is configurable: 2 MHz, 25 MHz, 50 MHz or 100 MHz.
     27                 (++) Alternate Function: Push-Pull (Pull-up, Pull-down or no Pull) Open 
     28                      Drain (Pull-up, Pull-down or no Pull).
     29                 (++) Analog: required mode when a pin is to be used as ADC channel or DAC 
     30                      output.
     31             
     32             (#) Peripherals alternate function:
     33                 (++) For ADC and DAC, configure the desired pin in analog mode using 
     34                      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AN;
     35                      (+++) For other peripherals (TIM, USART...):
     36                      (+++) Connect the pin to the desired peripherals' Alternate 
     37                               Function (AF) using GPIO_PinAFConfig() function
     38                      (+++) Configure the desired pin in alternate function mode using
     39                               GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
     40                      (+++) Select the type, pull-up/pull-down and output speed via 
     41                               GPIO_PuPd, GPIO_OType and GPIO_Speed members
     42                      (+++) Call GPIO_Init() function
     43                    
     44             (#) To get the level of a pin configured in input mode use GPIO_ReadInputDataBit()
     45                      
     46             (#) To set/reset the level of a pin configured in output mode use 
     47                 GPIO_SetBits()/GPIO_ResetBits()
     48                           
     49             (#) During and just after reset, the alternate functions are not 
     50                 active and the GPIO pins are configured in input floating mode (except JTAG
     51                 pins).
     52            
     53             (#) The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as general purpose 
     54                 (PC14 and PC15, respectively) when the LSE oscillator is off. The LSE has 
     55                 priority over the GPIO function.
     56            
     57             (#) The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
     58                 general purpose PH0 and PH1, respectively, when the HSE oscillator is off. 
     59                 The HSE has priority over the GPIO function.
     60                         
     61          @endverbatim        
     62            *
     63            ******************************************************************************
     64            * @attention
     65            *
     66            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     67            *
     68            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     69            * You may not use this file except in compliance with the License.
     70            * You may obtain a copy of the License at:
     71            *
     72            *        http://www.st.com/software_license_agreement_liberty_v2
     73            *
     74            * Unless required by applicable law or agreed to in writing, software 
     75            * distributed under the License is distributed on an "AS IS" BASIS, 
     76            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     77            * See the License for the specific language governing permissions and
     78            * limitations under the License.
     79            *
     80            ******************************************************************************
     81            */
     82          
     83          /* Includes ------------------------------------------------------------------*/
     84          #include "stm32f4xx_gpio.h"
     85          #include "stm32f4xx_rcc.h"
     86          
     87          /** @addtogroup STM32F4xx_StdPeriph_Driver
     88            * @{
     89            */
     90          
     91          /** @defgroup GPIO 
     92            * @brief GPIO driver modules
     93            * @{
     94            */ 
     95          
     96          /* Private typedef -----------------------------------------------------------*/
     97          /* Private define ------------------------------------------------------------*/
     98          /* Private macro -------------------------------------------------------------*/
     99          /* Private variables ---------------------------------------------------------*/
    100          /* Private function prototypes -----------------------------------------------*/
    101          /* Private functions ---------------------------------------------------------*/
    102          
    103          /** @defgroup GPIO_Private_Functions
    104            * @{
    105            */ 
    106          
    107          /** @defgroup GPIO_Group1 Initialization and Configuration
    108           *  @brief   Initialization and Configuration
    109           *
    110          @verbatim   
    111           ===============================================================================
    112                           ##### Initialization and Configuration #####
    113           ===============================================================================  
    114          
    115          @endverbatim
    116            * @{
    117            */
    118          
    119          /**
    120            * @brief  De-initializes the GPIOx peripheral registers to their default reset values.
    121            * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
    122            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    123            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    124            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
    125            * @retval None
    126            */

   \                                 In section .text, align 2, keep-with-next
    127          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
    128          {
   \                     GPIO_DeInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    129            /* Check the parameters */
    130            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    131          
    132            if (GPIOx == GPIOA)
   \        0x2   0x....             LDR.N    R1,??DataTable0  ;; 0x40020000
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD108             BNE.N    ??GPIO_DeInit_0
    133            {
    134              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x....'....        BL       RCC_AHB1PeriphResetCmd
    135              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0x18   0xE07C             B.N      ??GPIO_DeInit_1
    136            }
    137            else if (GPIOx == GPIOB)
   \                     ??GPIO_DeInit_0: (+1)
   \       0x1A   0x....             LDR.N    R1,??DataTable0_1  ;; 0x40020400
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD108             BNE.N    ??GPIO_DeInit_2
    138            {
    139              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x2002             MOVS     R0,#+2
   \       0x24   0x....'....        BL       RCC_AHB1PeriphResetCmd
    140              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0x2002             MOVS     R0,#+2
   \       0x2C   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0x30   0xE070             B.N      ??GPIO_DeInit_1
    141            }
    142            else if (GPIOx == GPIOC)
   \                     ??GPIO_DeInit_2: (+1)
   \       0x32   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40020800
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xD108             BNE.N    ??GPIO_DeInit_3
    143            {
    144              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
   \       0x38   0x2101             MOVS     R1,#+1
   \       0x3A   0x2004             MOVS     R0,#+4
   \       0x3C   0x....'....        BL       RCC_AHB1PeriphResetCmd
    145              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0x2004             MOVS     R0,#+4
   \       0x44   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0x48   0xE064             B.N      ??GPIO_DeInit_1
    146            }
    147            else if (GPIOx == GPIOD)
   \                     ??GPIO_DeInit_3: (+1)
   \       0x4A   0x....             LDR.N    R1,??DataTable0_3  ;; 0x40020c00
   \       0x4C   0x4288             CMP      R0,R1
   \       0x4E   0xD108             BNE.N    ??GPIO_DeInit_4
    148            {
    149              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
   \       0x50   0x2101             MOVS     R1,#+1
   \       0x52   0x2008             MOVS     R0,#+8
   \       0x54   0x....'....        BL       RCC_AHB1PeriphResetCmd
    150              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
   \       0x58   0x2100             MOVS     R1,#+0
   \       0x5A   0x2008             MOVS     R0,#+8
   \       0x5C   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0x60   0xE058             B.N      ??GPIO_DeInit_1
    151            }
    152            else if (GPIOx == GPIOE)
   \                     ??GPIO_DeInit_4: (+1)
   \       0x62   0x....             LDR.N    R1,??DataTable0_4  ;; 0x40021000
   \       0x64   0x4288             CMP      R0,R1
   \       0x66   0xD108             BNE.N    ??GPIO_DeInit_5
    153            {
    154              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
   \       0x68   0x2101             MOVS     R1,#+1
   \       0x6A   0x2010             MOVS     R0,#+16
   \       0x6C   0x....'....        BL       RCC_AHB1PeriphResetCmd
    155              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
   \       0x70   0x2100             MOVS     R1,#+0
   \       0x72   0x2010             MOVS     R0,#+16
   \       0x74   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0x78   0xE04C             B.N      ??GPIO_DeInit_1
    156            }
    157            else if (GPIOx == GPIOF)
   \                     ??GPIO_DeInit_5: (+1)
   \       0x7A   0x....             LDR.N    R1,??DataTable0_5  ;; 0x40021400
   \       0x7C   0x4288             CMP      R0,R1
   \       0x7E   0xD108             BNE.N    ??GPIO_DeInit_6
    158            {
    159              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
   \       0x80   0x2101             MOVS     R1,#+1
   \       0x82   0x2020             MOVS     R0,#+32
   \       0x84   0x....'....        BL       RCC_AHB1PeriphResetCmd
    160              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
   \       0x88   0x2100             MOVS     R1,#+0
   \       0x8A   0x2020             MOVS     R0,#+32
   \       0x8C   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0x90   0xE040             B.N      ??GPIO_DeInit_1
    161            }
    162            else if (GPIOx == GPIOG)
   \                     ??GPIO_DeInit_6: (+1)
   \       0x92   0x....             LDR.N    R1,??DataTable0_6  ;; 0x40021800
   \       0x94   0x4288             CMP      R0,R1
   \       0x96   0xD108             BNE.N    ??GPIO_DeInit_7
    163            {
    164              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x2040             MOVS     R0,#+64
   \       0x9C   0x....'....        BL       RCC_AHB1PeriphResetCmd
    165              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
   \       0xA0   0x2100             MOVS     R1,#+0
   \       0xA2   0x2040             MOVS     R0,#+64
   \       0xA4   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0xA8   0xE034             B.N      ??GPIO_DeInit_1
    166            }
    167            else if (GPIOx == GPIOH)
   \                     ??GPIO_DeInit_7: (+1)
   \       0xAA   0x....             LDR.N    R1,??DataTable0_7  ;; 0x40021c00
   \       0xAC   0x4288             CMP      R0,R1
   \       0xAE   0xD108             BNE.N    ??GPIO_DeInit_8
    168            {
    169              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
   \       0xB0   0x2101             MOVS     R1,#+1
   \       0xB2   0x2080             MOVS     R0,#+128
   \       0xB4   0x....'....        BL       RCC_AHB1PeriphResetCmd
    170              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
   \       0xB8   0x2100             MOVS     R1,#+0
   \       0xBA   0x2080             MOVS     R0,#+128
   \       0xBC   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0xC0   0xE028             B.N      ??GPIO_DeInit_1
    171            }
    172          
    173            else if (GPIOx == GPIOI)
   \                     ??GPIO_DeInit_8: (+1)
   \       0xC2   0x....             LDR.N    R1,??DataTable0_8  ;; 0x40022000
   \       0xC4   0x4288             CMP      R0,R1
   \       0xC6   0xD10A             BNE.N    ??GPIO_DeInit_9
    174            {
    175              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
   \       0xC8   0x2101             MOVS     R1,#+1
   \       0xCA   0xF44F 0x7080      MOV      R0,#+256
   \       0xCE   0x....'....        BL       RCC_AHB1PeriphResetCmd
    176              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
   \       0xD2   0x2100             MOVS     R1,#+0
   \       0xD4   0xF44F 0x7080      MOV      R0,#+256
   \       0xD8   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0xDC   0xE01A             B.N      ??GPIO_DeInit_1
    177            }
    178            else if (GPIOx == GPIOJ)
   \                     ??GPIO_DeInit_9: (+1)
   \       0xDE   0x....             LDR.N    R1,??DataTable0_9  ;; 0x40022400
   \       0xE0   0x4288             CMP      R0,R1
   \       0xE2   0xD10A             BNE.N    ??GPIO_DeInit_10
    179            {
    180              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
   \       0xE4   0x2101             MOVS     R1,#+1
   \       0xE6   0xF44F 0x7000      MOV      R0,#+512
   \       0xEA   0x....'....        BL       RCC_AHB1PeriphResetCmd
    181              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
   \       0xEE   0x2100             MOVS     R1,#+0
   \       0xF0   0xF44F 0x7000      MOV      R0,#+512
   \       0xF4   0x....'....        BL       RCC_AHB1PeriphResetCmd
   \       0xF8   0xE00C             B.N      ??GPIO_DeInit_1
    182            }
    183            else
    184            {
    185              if (GPIOx == GPIOK)
   \                     ??GPIO_DeInit_10: (+1)
   \       0xFA   0x....             LDR.N    R1,??DataTable0_10  ;; 0x40022800
   \       0xFC   0x4288             CMP      R0,R1
   \       0xFE   0xD109             BNE.N    ??GPIO_DeInit_1
    186              {
    187                RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
   \      0x100   0x2101             MOVS     R1,#+1
   \      0x102   0xF44F 0x6080      MOV      R0,#+1024
   \      0x106   0x....'....        BL       RCC_AHB1PeriphResetCmd
    188                RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
   \      0x10A   0x2100             MOVS     R1,#+0
   \      0x10C   0xF44F 0x6080      MOV      R0,#+1024
   \      0x110   0x....'....        BL       RCC_AHB1PeriphResetCmd
    189              }
    190            }
    191          }
   \                     ??GPIO_DeInit_1: (+1)
   \      0x114   0xBD01             POP      {R0,PC}          ;; return
    192          
    193          /**
    194            * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_InitStruct.
    195            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    196            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    197            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.   
    198            * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
    199            *         the configuration information for the specified GPIO peripheral.
    200            * @retval None
    201            */

   \                                 In section .text, align 2, keep-with-next
    202          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
    203          {
   \                     GPIO_Init: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
    204            uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x2200             MOVS     R2,#+0
    205          
    206            /* Check the parameters */
    207            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    208            assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
    209            assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
    210            assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
    211          
    212            /* ------------------------- Configure the port pins ---------------- */
    213            /*-- GPIO Mode Configuration --*/
    214            for (pinpos = 0x00; pinpos < 0x10; pinpos++)
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0xE049             B.N      ??GPIO_Init_0
    215            {
    216              pos = ((uint32_t)0x01) << pinpos;
   \                     ??GPIO_Init_1: (+1)
   \        0xC   0x2401             MOVS     R4,#+1
   \        0xE   0xFA14 0xF203      LSLS     R2,R4,R3
    217              /* Get the port pins position */
    218              currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
   \       0x12   0x680D             LDR      R5,[R1, #+0]
   \       0x14   0x4015             ANDS     R5,R2,R5
    219          
    220              if (currentpin == pos)
   \       0x16   0x4295             CMP      R5,R2
   \       0x18   0xD141             BNE.N    ??GPIO_Init_2
    221              {
    222                GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
   \       0x1A   0x2503             MOVS     R5,#+3
   \       0x1C   0x6802             LDR      R2,[R0, #+0]
   \       0x1E   0x001E             MOVS     R6,R3
   \       0x20   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x22   0x0076             LSLS     R6,R6,#+1
   \       0x24   0xFA15 0xF606      LSLS     R6,R5,R6
   \       0x28   0x43B2             BICS     R2,R2,R6
   \       0x2A   0x6002             STR      R2,[R0, #+0]
    223                GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
   \       0x2C   0x6806             LDR      R6,[R0, #+0]
   \       0x2E   0x790F             LDRB     R7,[R1, #+4]
   \       0x30   0x001A             MOVS     R2,R3
   \       0x32   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x34   0x0052             LSLS     R2,R2,#+1
   \       0x36   0x4097             LSLS     R7,R7,R2
   \       0x38   0x433E             ORRS     R6,R7,R6
   \       0x3A   0x6006             STR      R6,[R0, #+0]
    224          
    225                if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
   \       0x3C   0x790A             LDRB     R2,[R1, #+4]
   \       0x3E   0x2A01             CMP      R2,#+1
   \       0x40   0xD002             BEQ.N    ??GPIO_Init_3
   \       0x42   0x790A             LDRB     R2,[R1, #+4]
   \       0x44   0x2A02             CMP      R2,#+2
   \       0x46   0xD11A             BNE.N    ??GPIO_Init_4
    226                {
    227                  /* Check Speed mode parameters */
    228                  assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    229          
    230                  /* Speed mode configuration */
    231                  GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
   \                     ??GPIO_Init_3: (+1)
   \       0x48   0x6882             LDR      R2,[R0, #+8]
   \       0x4A   0x001E             MOVS     R6,R3
   \       0x4C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x4E   0x0076             LSLS     R6,R6,#+1
   \       0x50   0xFA15 0xF606      LSLS     R6,R5,R6
   \       0x54   0x43B2             BICS     R2,R2,R6
   \       0x56   0x6082             STR      R2,[R0, #+8]
    232                  GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
   \       0x58   0x6886             LDR      R6,[R0, #+8]
   \       0x5A   0x794F             LDRB     R7,[R1, #+5]
   \       0x5C   0x001A             MOVS     R2,R3
   \       0x5E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x60   0x0052             LSLS     R2,R2,#+1
   \       0x62   0x4097             LSLS     R7,R7,R2
   \       0x64   0x433E             ORRS     R6,R7,R6
   \       0x66   0x6086             STR      R6,[R0, #+8]
    233          
    234                  /* Check Output mode parameters */
    235                  assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
    236          
    237                  /* Output mode configuration*/
    238                  GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
   \       0x68   0x6842             LDR      R2,[R0, #+4]
   \       0x6A   0x409C             LSLS     R4,R4,R3
   \       0x6C   0xEA32 0x0404      BICS     R4,R2,R4
   \       0x70   0x6044             STR      R4,[R0, #+4]
    239                  GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
   \       0x72   0x6842             LDR      R2,[R0, #+4]
   \       0x74   0x798C             LDRB     R4,[R1, #+6]
   \       0x76   0x409C             LSLS     R4,R4,R3
   \       0x78   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \       0x7A   0x4322             ORRS     R2,R4,R2
   \       0x7C   0x6042             STR      R2,[R0, #+4]
    240                }
    241          
    242                /* Pull-up Pull down resistor configuration*/
    243                GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
   \                     ??GPIO_Init_4: (+1)
   \       0x7E   0x68C4             LDR      R4,[R0, #+12]
   \       0x80   0x001A             MOVS     R2,R3
   \       0x82   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x84   0x0052             LSLS     R2,R2,#+1
   \       0x86   0x4095             LSLS     R5,R5,R2
   \       0x88   0xEA34 0x0505      BICS     R5,R4,R5
   \       0x8C   0x60C5             STR      R5,[R0, #+12]
    244                GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
   \       0x8E   0x68C4             LDR      R4,[R0, #+12]
   \       0x90   0x79CD             LDRB     R5,[R1, #+7]
   \       0x92   0x001A             MOVS     R2,R3
   \       0x94   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x96   0x0052             LSLS     R2,R2,#+1
   \       0x98   0x4095             LSLS     R5,R5,R2
   \       0x9A   0x432C             ORRS     R4,R5,R4
   \       0x9C   0x60C4             STR      R4,[R0, #+12]
    245              }
    246            }
   \                     ??GPIO_Init_2: (+1)
   \       0x9E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GPIO_Init_0: (+1)
   \       0xA0   0x2B10             CMP      R3,#+16
   \       0xA2   0xD3B3             BCC.N    ??GPIO_Init_1
    247          }
   \       0xA4   0xBCF0             POP      {R4-R7}
   \       0xA6   0x4770             BX       LR               ;; return
    248          
    249          /**
    250            * @brief  Fills each GPIO_InitStruct member with its default value.
    251            * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
    252            * @retval None
    253            */

   \                                 In section .text, align 2, keep-with-next
    254          void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
    255          {
    256            /* Reset GPIO init structure parameters values */
    257            GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
   \                     GPIO_StructInit: (+1)
   \        0x0   0xF64F 0x71FF      MOVW     R1,#+65535
   \        0x4   0x6001             STR      R1,[R0, #+0]
    258            GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x7101             STRB     R1,[R0, #+4]
    259            GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x7141             STRB     R1,[R0, #+5]
    260            GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x7181             STRB     R1,[R0, #+6]
    261            GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x71C1             STRB     R1,[R0, #+7]
    262          }
   \       0x16   0x4770             BX       LR               ;; return
    263          
    264          /**
    265            * @brief  Locks GPIO Pins configuration registers.
    266            * @note   The locked registers are GPIOx_MODER, GPIOx_OTYPER, GPIOx_OSPEEDR,
    267            *         GPIOx_PUPDR, GPIOx_AFRL and GPIOx_AFRH.
    268            * @note   The configuration of the locked GPIO pins can no longer be modified
    269            *         until the next reset.
    270            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    271            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    272            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    273            * @param  GPIO_Pin: specifies the port bit to be locked.
    274            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    275            * @retval None
    276            */

   \                                 In section .text, align 2, keep-with-next
    277          void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    278          {
   \                     GPIO_PinLockConfig: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    279            __IO uint32_t tmp = 0x00010000;
   \        0x2   0xF45F 0x3280      MOVS     R2,#+65536
   \        0x6   0x9200             STR      R2,[SP, #+0]
    280          
    281            /* Check the parameters */
    282            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    283            assert_param(IS_GPIO_PIN(GPIO_Pin));
    284          
    285            tmp |= GPIO_Pin;
   \        0x8   0x9B00             LDR      R3,[SP, #+0]
   \        0xA   0x000A             MOVS     R2,R1
   \        0xC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \        0xE   0x4313             ORRS     R3,R2,R3
   \       0x10   0x9300             STR      R3,[SP, #+0]
    286            /* Set LCKK bit */
    287            GPIOx->LCKR = tmp;
   \       0x12   0x9A00             LDR      R2,[SP, #+0]
   \       0x14   0x61C2             STR      R2,[R0, #+28]
    288            /* Reset LCKK bit */
    289            GPIOx->LCKR =  GPIO_Pin;
   \       0x16   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \       0x18   0x61C1             STR      R1,[R0, #+28]
    290            /* Set LCKK bit */
    291            GPIOx->LCKR = tmp;
   \       0x1A   0x9900             LDR      R1,[SP, #+0]
   \       0x1C   0x61C1             STR      R1,[R0, #+28]
    292            /* Read LCKK bit*/
    293            tmp = GPIOx->LCKR;
   \       0x1E   0x69C1             LDR      R1,[R0, #+28]
   \       0x20   0x9100             STR      R1,[SP, #+0]
    294            /* Read LCKK bit*/
    295            tmp = GPIOx->LCKR;
   \       0x22   0x69C0             LDR      R0,[R0, #+28]
   \       0x24   0x9000             STR      R0,[SP, #+0]
    296          }
   \       0x26   0xB001             ADD      SP,SP,#+4
   \       0x28   0x4770             BX       LR               ;; return
    297          
    298          /**
    299            * @}
    300            */
    301          
    302          /** @defgroup GPIO_Group2 GPIO Read and Write
    303           *  @brief   GPIO Read and Write
    304           *
    305          @verbatim   
    306           ===============================================================================
    307                                   ##### GPIO Read and Write #####
    308           ===============================================================================  
    309          
    310          @endverbatim
    311            * @{
    312            */
    313          
    314          /**
    315            * @brief  Reads the specified input port pin.
    316            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    317            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    318            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    319            * @param  GPIO_Pin: specifies the port bit to read.
    320            *         This parameter can be GPIO_Pin_x where x can be (0..15).
    321            * @retval The input port pin value.
    322            */

   \                                 In section .text, align 2, keep-with-next
    323          uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    324          {
    325            uint8_t bitstatus = 0x00;
   \                     GPIO_ReadInputDataBit: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
    326          
    327            /* Check the parameters */
    328            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    329            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    330          
    331            if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
   \        0x2   0x6900             LDR      R0,[R0, #+16]
   \        0x4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \        0x6   0x4208             TST      R0,R1
   \        0x8   0xD001             BEQ.N    ??GPIO_ReadInputDataBit_0
    332            {
    333              bitstatus = (uint8_t)Bit_SET;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B.N      ??GPIO_ReadInputDataBit_1
    334            }
    335            else
    336            {
    337              bitstatus = (uint8_t)Bit_RESET;
   \                     ??GPIO_ReadInputDataBit_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
    338            }
    339            return bitstatus;
   \                     ??GPIO_ReadInputDataBit_1: (+1)
   \       0x10   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x12   0x4770             BX       LR               ;; return
    340          }
    341          
    342          /**
    343            * @brief  Reads the specified GPIO input data port.
    344            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    345            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    346            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    347            * @retval GPIO input data port value.
    348            */

   \                                 In section .text, align 2, keep-with-next
    349          uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    350          {
    351            /* Check the parameters */
    352            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    353          
    354            return ((uint16_t)GPIOx->IDR);
   \                     GPIO_ReadInputData: (+1)
   \        0x0   0x6900             LDR      R0,[R0, #+16]
   \        0x2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \        0x4   0x4770             BX       LR               ;; return
    355          }
    356          
    357          /**
    358            * @brief  Reads the specified output data port bit.
    359            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    360            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    361            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    362            * @param  GPIO_Pin: specifies the port bit to read.
    363            *          This parameter can be GPIO_Pin_x where x can be (0..15).
    364            * @retval The output port pin value.
    365            */

   \                                 In section .text, align 2, keep-with-next
    366          uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    367          {
    368            uint8_t bitstatus = 0x00;
   \                     GPIO_ReadOutputDataBit: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
    369          
    370            /* Check the parameters */
    371            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    372            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    373          
    374            if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
   \        0x2   0x6940             LDR      R0,[R0, #+20]
   \        0x4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \        0x6   0x4208             TST      R0,R1
   \        0x8   0xD001             BEQ.N    ??GPIO_ReadOutputDataBit_0
    375            {
    376              bitstatus = (uint8_t)Bit_SET;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B.N      ??GPIO_ReadOutputDataBit_1
    377            }
    378            else
    379            {
    380              bitstatus = (uint8_t)Bit_RESET;
   \                     ??GPIO_ReadOutputDataBit_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
    381            }
    382            return bitstatus;
   \                     ??GPIO_ReadOutputDataBit_1: (+1)
   \       0x10   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x12   0x4770             BX       LR               ;; return
    383          }
    384          
    385          /**
    386            * @brief  Reads the specified GPIO output data port.
    387            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    388            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    389            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    390            * @retval GPIO output data port value.
    391            */

   \                                 In section .text, align 2, keep-with-next
    392          uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    393          {
    394            /* Check the parameters */
    395            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    396          
    397            return ((uint16_t)GPIOx->ODR);
   \                     GPIO_ReadOutputData: (+1)
   \        0x0   0x6940             LDR      R0,[R0, #+20]
   \        0x2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \        0x4   0x4770             BX       LR               ;; return
    398          }
    399          
    400          /**
    401            * @brief  Sets the selected data port bits.
    402            * @note   This functions uses GPIOx_BSRR register to allow atomic read/modify 
    403            *         accesses. In this way, there is no risk of an IRQ occurring between
    404            *         the read and the modify access.
    405            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    406            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    407            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    408            * @param  GPIO_Pin: specifies the port bits to be written.
    409            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    410            * @retval None
    411            */

   \                                 In section .text, align 2, keep-with-next
    412          void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    413          {
    414            /* Check the parameters */
    415            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    416            assert_param(IS_GPIO_PIN(GPIO_Pin));
    417          
    418            GPIOx->BSRRL = GPIO_Pin;
   \                     GPIO_SetBits: (+1)
   \        0x0   0x8301             STRH     R1,[R0, #+24]
    419          }
   \        0x2   0x4770             BX       LR               ;; return
    420          
    421          /**
    422            * @brief  Clears the selected data port bits.
    423            * @note   This functions uses GPIOx_BSRR register to allow atomic read/modify 
    424            *         accesses. In this way, there is no risk of an IRQ occurring between
    425            *         the read and the modify access.
    426            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    427            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    428            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    429            * @param  GPIO_Pin: specifies the port bits to be written.
    430            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    431            * @retval None
    432            */

   \                                 In section .text, align 2, keep-with-next
    433          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    434          {
    435            /* Check the parameters */
    436            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    437            assert_param(IS_GPIO_PIN(GPIO_Pin));
    438          
    439            GPIOx->BSRRH = GPIO_Pin;
   \                     GPIO_ResetBits: (+1)
   \        0x0   0x8341             STRH     R1,[R0, #+26]
    440          }
   \        0x2   0x4770             BX       LR               ;; return
    441          
    442          /**
    443            * @brief  Sets or clears the selected data port bit.
    444            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    445            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    446            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    447            * @param  GPIO_Pin: specifies the port bit to be written.
    448            *          This parameter can be one of GPIO_Pin_x where x can be (0..15).
    449            * @param  BitVal: specifies the value to be written to the selected bit.
    450            *          This parameter can be one of the BitAction enum values:
    451            *            @arg Bit_RESET: to clear the port pin
    452            *            @arg Bit_SET: to set the port pin
    453            * @retval None
    454            */

   \                                 In section .text, align 2, keep-with-next
    455          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
    456          {
    457            /* Check the parameters */
    458            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    459            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    460            assert_param(IS_GPIO_BIT_ACTION(BitVal));
    461          
    462            if (BitVal != Bit_RESET)
   \                     GPIO_WriteBit: (+1)
   \        0x0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \        0x2   0x2A00             CMP      R2,#+0
   \        0x4   0xD001             BEQ.N    ??GPIO_WriteBit_0
    463            {
    464              GPIOx->BSRRL = GPIO_Pin;
   \        0x6   0x8301             STRH     R1,[R0, #+24]
   \        0x8   0xE000             B.N      ??GPIO_WriteBit_1
    465            }
    466            else
    467            {
    468              GPIOx->BSRRH = GPIO_Pin ;
   \                     ??GPIO_WriteBit_0: (+1)
   \        0xA   0x8341             STRH     R1,[R0, #+26]
    469            }
    470          }
   \                     ??GPIO_WriteBit_1: (+1)
   \        0xC   0x4770             BX       LR               ;; return
    471          
    472          /**
    473            * @brief  Writes data to the specified GPIO data port.
    474            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    475            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    476            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    477            * @param  PortVal: specifies the value to be written to the port output data register.
    478            * @retval None
    479            */

   \                                 In section .text, align 2, keep-with-next
    480          void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
    481          {
    482            /* Check the parameters */
    483            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    484          
    485            GPIOx->ODR = PortVal;
   \                     GPIO_Write: (+1)
   \        0x0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \        0x2   0x6141             STR      R1,[R0, #+20]
    486          }
   \        0x4   0x4770             BX       LR               ;; return
    487          
    488          /**
    489            * @brief  Toggles the specified GPIO pins..
    490            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    491            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    492            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    493            * @param  GPIO_Pin: Specifies the pins to be toggled.
    494            * @retval None
    495            */

   \                                 In section .text, align 2, keep-with-next
    496          void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    497          {
    498            /* Check the parameters */
    499            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    500          
    501            GPIOx->ODR ^= GPIO_Pin;
   \                     GPIO_ToggleBits: (+1)
   \        0x0   0x6942             LDR      R2,[R0, #+20]
   \        0x2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \        0x4   0x4051             EORS     R1,R1,R2
   \        0x6   0x6141             STR      R1,[R0, #+20]
    502          }
   \        0x8   0x4770             BX       LR               ;; return
    503          
    504          /**
    505            * @}
    506            */
    507          
    508          /** @defgroup GPIO_Group3 GPIO Alternate functions configuration function
    509           *  @brief   GPIO Alternate functions configuration function
    510           *
    511          @verbatim   
    512           ===============================================================================
    513                     ##### GPIO Alternate functions configuration function #####
    514           ===============================================================================  
    515          
    516          @endverbatim
    517            * @{
    518            */
    519          
    520          /**
    521            * @brief  Changes the mapping of the specified pin.
    522            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F405xx/407xx and STM32F415xx/417xx devices
    523            *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
    524            *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
    525            * @param  GPIO_PinSource: specifies the pin for the Alternate function.
    526            *         This parameter can be GPIO_PinSourcex where x can be (0..15).
    527            * @param  GPIO_AFSelection: selects the pin to used as Alternate function.
    528            *          This parameter can be one of the following values:
    529            *            @arg GPIO_AF_RTC_50Hz: Connect RTC_50Hz pin to AF0 (default after reset) 
    530            *            @arg GPIO_AF_MCO: Connect MCO pin (MCO1 and MCO2) to AF0 (default after reset) 
    531            *            @arg GPIO_AF_TAMPER: Connect TAMPER pins (TAMPER_1 and TAMPER_2) to AF0 (default after reset) 
    532            *            @arg GPIO_AF_SWJ: Connect SWJ pins (SWD and JTAG)to AF0 (default after reset) 
    533            *            @arg GPIO_AF_TRACE: Connect TRACE pins to AF0 (default after reset)
    534            *            @arg GPIO_AF_TIM1: Connect TIM1 pins to AF1
    535            *            @arg GPIO_AF_TIM2: Connect TIM2 pins to AF1
    536            *            @arg GPIO_AF_TIM3: Connect TIM3 pins to AF2
    537            *            @arg GPIO_AF_TIM4: Connect TIM4 pins to AF2
    538            *            @arg GPIO_AF_TIM5: Connect TIM5 pins to AF2
    539            *            @arg GPIO_AF_TIM8: Connect TIM8 pins to AF3
    540            *            @arg GPIO_AF_TIM9: Connect TIM9 pins to AF3
    541            *            @arg GPIO_AF_TIM10: Connect TIM10 pins to AF3
    542            *            @arg GPIO_AF_TIM11: Connect TIM11 pins to AF3
    543            *            @arg GPIO_AF_I2C1: Connect I2C1 pins to AF4
    544            *            @arg GPIO_AF_I2C2: Connect I2C2 pins to AF4
    545            *            @arg GPIO_AF_I2C3: Connect I2C3 pins to AF4
    546            *            @arg GPIO_AF_SPI1: Connect SPI1 pins to AF5
    547            *            @arg GPIO_AF_SPI2: Connect SPI2/I2S2 pins to AF5
    548            *            @arg GPIO_AF_SPI4: Connect SPI4 pins to AF5 
    549            *            @arg GPIO_AF_SPI5: Connect SPI5 pins to AF5 
    550            *            @arg GPIO_AF_SPI6: Connect SPI6 pins to AF5
    551            *            @arg GPIO_AF_SAI1: Connect SAI1 pins to AF6 for STM32F42xxx/43xxx devices.       
    552            *            @arg GPIO_AF_SPI3: Connect SPI3/I2S3 pins to AF6
    553            *            @arg GPIO_AF_I2S3ext: Connect I2S3ext pins to AF7
    554            *            @arg GPIO_AF_USART1: Connect USART1 pins to AF7
    555            *            @arg GPIO_AF_USART2: Connect USART2 pins to AF7
    556            *            @arg GPIO_AF_USART3: Connect USART3 pins to AF7
    557            *            @arg GPIO_AF_UART4: Connect UART4 pins to AF8
    558            *            @arg GPIO_AF_UART5: Connect UART5 pins to AF8
    559            *            @arg GPIO_AF_USART6: Connect USART6 pins to AF8
    560            *            @arg GPIO_AF_UART7: Connect UART7 pins to AF8
    561            *            @arg GPIO_AF_UART8: Connect UART8 pins to AF8
    562            *            @arg GPIO_AF_CAN1: Connect CAN1 pins to AF9
    563            *            @arg GPIO_AF_CAN2: Connect CAN2 pins to AF9
    564            *            @arg GPIO_AF_TIM12: Connect TIM12 pins to AF9
    565            *            @arg GPIO_AF_TIM13: Connect TIM13 pins to AF9
    566            *            @arg GPIO_AF_TIM14: Connect TIM14 pins to AF9
    567            *            @arg GPIO_AF_OTG_FS: Connect OTG_FS pins to AF10
    568            *            @arg GPIO_AF_OTG_HS: Connect OTG_HS pins to AF10
    569            *            @arg GPIO_AF_ETH: Connect ETHERNET pins to AF11
    570            *            @arg GPIO_AF_FSMC: Connect FSMC pins to AF12 
    571            *            @arg GPIO_AF_FMC: Connect FMC pins to AF12 for STM32F42xxx/43xxx devices.   
    572            *            @arg GPIO_AF_OTG_HS_FS: Connect OTG HS (configured in FS) pins to AF12
    573            *            @arg GPIO_AF_SDIO: Connect SDIO pins to AF12
    574            *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
    575            *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
    576            *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
    577            * @retval None
    578            */

   \                                 In section .text, align 2, keep-with-next
    579          void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
    580          {
   \                     GPIO_PinAFConfig: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    581            uint32_t temp = 0x00;
   \        0x2   0x2300             MOVS     R3,#+0
    582            uint32_t temp_2 = 0x00;
   \        0x4   0x2300             MOVS     R3,#+0
    583            
    584            /* Check the parameters */
    585            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    586            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    587            assert_param(IS_GPIO_AF(GPIO_AF));
    588            
    589            temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
   \        0x6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \        0x8   0xF011 0x0307      ANDS     R3,R1,#0x7
   \        0xC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \        0xE   0x009B             LSLS     R3,R3,#+2
   \       0x10   0x409A             LSLS     R2,R2,R3
    590            GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
   \       0x12   0x000B             MOVS     R3,R1
   \       0x14   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \       0x16   0x10DB             ASRS     R3,R3,#+3
   \       0x18   0xEB00 0x0483      ADD      R4,R0,R3, LSL #+2
   \       0x1C   0x000B             MOVS     R3,R1
   \       0x1E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \       0x20   0x10DB             ASRS     R3,R3,#+3
   \       0x22   0xEB00 0x0383      ADD      R3,R0,R3, LSL #+2
   \       0x26   0x6A1D             LDR      R5,[R3, #+32]
   \       0x28   0x260F             MOVS     R6,#+15
   \       0x2A   0xF011 0x0307      ANDS     R3,R1,#0x7
   \       0x2E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x30   0x009B             LSLS     R3,R3,#+2
   \       0x32   0x409E             LSLS     R6,R6,R3
   \       0x34   0x43B5             BICS     R5,R5,R6
   \       0x36   0x6225             STR      R5,[R4, #+32]
    591            temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
   \       0x38   0x000B             MOVS     R3,R1
   \       0x3A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \       0x3C   0x10DB             ASRS     R3,R3,#+3
   \       0x3E   0xEB00 0x0383      ADD      R3,R0,R3, LSL #+2
   \       0x42   0x6A1B             LDR      R3,[R3, #+32]
   \       0x44   0x431A             ORRS     R2,R2,R3
    592            GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
   \       0x46   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \       0x48   0x10C9             ASRS     R1,R1,#+3
   \       0x4A   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \       0x4E   0x6202             STR      R2,[R0, #+32]
    593          }
   \       0x50   0xBC70             POP      {R4-R6}
   \       0x52   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \        0x0   0x4002'0400        DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \        0x0   0x4002'0800        DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \        0x0   0x4002'1400        DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \        0x0   0x4002'1800        DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \        0x0   0x4002'1C00        DC32     0x40021c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \        0x0   0x4002'2000        DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \        0x0   0x4002'2400        DC32     0x40022400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \        0x0   0x4002'2800        DC32     0x40022800
    594          
    595          /**
    596            * @}
    597            */ 
    598          
    599          /**
    600            * @}
    601            */
    602          
    603          /**
    604            * @}
    605            */ 
    606          
    607          /**
    608            * @}
    609            */ 
    610          
    611          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GPIO_DeInit
         8   -> RCC_AHB1PeriphResetCmd
      16   GPIO_Init
      12   GPIO_PinAFConfig
       4   GPIO_PinLockConfig
       0   GPIO_ReadInputData
       0   GPIO_ReadInputDataBit
       0   GPIO_ReadOutputData
       0   GPIO_ReadOutputDataBit
       0   GPIO_ResetBits
       0   GPIO_SetBits
       0   GPIO_StructInit
       0   GPIO_ToggleBits
       0   GPIO_Write
       0   GPIO_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
     278  GPIO_DeInit
     168  GPIO_Init
      84  GPIO_PinAFConfig
      42  GPIO_PinLockConfig
       6  GPIO_ReadInputData
      20  GPIO_ReadInputDataBit
       6  GPIO_ReadOutputData
      20  GPIO_ReadOutputDataBit
       4  GPIO_ResetBits
       4  GPIO_SetBits
      24  GPIO_StructInit
      10  GPIO_ToggleBits
       6  GPIO_Write
      14  GPIO_WriteBit

 
 730 bytes in section .text
 
 730 bytes of CODE memory

Errors: none
Warnings: none
