###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         24/Jul/2020  15:25:32
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\usart.c
#    Command line =
#        -f C:\Users\Evan\AppData\Local\Temp\EW29FA.tmp
#        (E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\usart.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -lC
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\List
#        -o
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\iar\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\inc\
#        -I
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\
#        -Ol --use_c++_inline -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\List\usart.lst
#    Object file  =
#        E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\Debug\Obj\usart.o
#
###############################################################################

E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\usart.c
      1          #include "usart.h"
      2          
      3          #define usart1_tx_len 1024
      4          #define usart1_rx_len 1024

   \                                 In section .bss, align 4
      5          uint8_t usart1_dma_tx_buf[usart1_tx_len];
   \                     usart1_dma_tx_buf:
   \        0x0                      DS8 1'024

   \                                 In section .bss, align 4
      6          uint8_t usart1_dma_rx_buf[usart1_rx_len];
   \                     usart1_dma_rx_buf:
   \        0x0                      DS8 1'024
      7          
      8          //int fputc(int ch,FILE *f)
      9          //{
     10          //    USART1->SR; 
     11          //    USART_SendData(USART1, (unsigned char) ch);
     12          //    while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);
     13          //    return(ch);
     14          //} 
     15          
     16          //------------------------------usart dma------------------------------//
     17          

   \                                 In section .data, align 1
     18          uint8_t usart1_sent = 1;
   \                     usart1_sent:
   \        0x0   0x01               DC8 1
     19          
     20          ////DMA發送完成中斷

   \                                 In section .text, align 2, keep-with-next
     21          void DMA2_Stream7_IRQHandler(void)
     22          {  
   \                     DMA2_Stream7_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     23            if(DMA_GetITStatus(DMA2_Stream7,DMA_IT_TCIF7) != RESET) //等待通道四傳輸完成
   \        0x2   0x....'....        LDR.W    R4,??DataTable8  ;; 0x400264b8
   \        0x6   0x....'....        LDR.W    R1,??DataTable8_1  ;; 0x28008000
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x....'....        BL       DMA_GetITStatus
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD008             BEQ.N    ??DMA2_Stream7_IRQHandler_0
     24            {
     25              DMA_Cmd(DMA2_Stream7, DISABLE);
   \       0x14   0x2100             MOVS     R1,#+0
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x....'....        BL       DMA_Cmd
     26              DMA_ClearFlag(DMA2_Stream7,DMA_FLAG_TCIF7);//清除通道四的完成標誌
   \       0x1C   0xF05F 0x5120      MOVS     R1,#+671088640
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x....'....        BL       DMA_ClearFlag
     27            }
     28            usart1_sent = 1;//重新令usart_sent的指令為1
   \                     ??DMA2_Stream7_IRQHandler_0: (+1)
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0x....'....        LDR.W    R1,??DataTable8_2
   \       0x2C   0x7008             STRB     R0,[R1, #+0]
     29          }
   \       0x2E   0xBD10             POP      {R4,PC}          ;; return
     30          //開啟一次DMA傳輸

   \                                 In section .text, align 2, keep-with-next
     31          void usart1_send(void* buf, int len){
   \                     usart1_send: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0003             MOVS     R3,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0xE001             B.N      ??usart1_send_0
     32            while(usart1_sent==0)
     33              //Delay(2); 
     34              usart1_sent = 0;
   \                     ??usart1_send_1: (+1)
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x7008             STRB     R0,[R1, #+0]
   \                     ??usart1_send_0: (+1)
   \        0xC   0x....'....        LDR.W    R1,??DataTable8_2
   \       0x10   0x7808             LDRB     R0,[R1, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD0F8             BEQ.N    ??usart1_send_1
     35            if(len > usart1_tx_len)
   \       0x16   0xF240 0x4001      MOVW     R0,#+1025
   \       0x1A   0x4284             CMP      R4,R0
   \       0x1C   0xDB01             BLT.N    ??usart1_send_2
     36            {
     37              len = usart1_tx_len;
   \       0x1E   0xF44F 0x6480      MOV      R4,#+1024
     38            }
     39            mymemcpy(usart1_dma_tx_buf,buf,len); //put the buf's data into usart1_dma_tx_buf
   \                     ??usart1_send_2: (+1)
   \       0x22   0x0022             MOVS     R2,R4
   \       0x24   0x0019             MOVS     R1,R3
   \       0x26   0x....'....        LDR.W    R0,??DataTable8_3
   \       0x2A   0x....'....        BL       mymemcpy
     40            DMA_SetCurrDataCounter(DMA2_Stream7,len); //設置DMA內存大小
   \       0x2E   0x....'....        LDR.W    R5,??DataTable8  ;; 0x400264b8
   \       0x32   0x0021             MOVS     R1,R4
   \       0x34   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0x....'....        BL       DMA_SetCurrDataCounter
     41            DMA_Cmd(DMA2_Stream7, ENABLE);//開啟DMA傳輸通道 完成上述步驟即代表我們啟動一次Usart1的DMA傳輸了
   \       0x3C   0x2101             MOVS     R1,#+1
   \       0x3E   0x0028             MOVS     R0,R5
   \       0x40   0x....'....        BL       DMA_Cmd
     42          } 
   \       0x44   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     43          
     44          //int usart1_read(uint8_t** buf)
     45          //{
     46          //    int rx_len;
     47          //    if(USART_GetFlagStatus(USART1,USART_FLAG_IDLE)!=RESET)
     48          //    {
     49          //		rx_len = USART1->SR;
     50          //        rx_len = USART1->DR;
     51          //		DMA_Cmd(DMA1_Channel5, DISABLE);                                    
     52          //        DMA_ClearFlag(DMA1_FLAG_TC5);
     53          //        rx_len = usart1_rx_len - DMA_GetCurrDataCounter(DMA1_Channel5);
     54          //        *buf = usart1_dma_rx_buf;
     55          //        DMA_SetCurrDataCounter(DMA1_Channel5,usart1_rx_len);                
     56          //        DMA_Cmd(DMA1_Channel5, ENABLE);
     57          //        
     58          //        return rx_len;
     59          //    }
     60          //    return -1;
     61          //}
     62          
     63          //void USART1_IRQHandler(void)
     64          //{
     65          //	int rx_len;    
     66          //	if(USART_GetITStatus(USART1, USART_IT_IDLE) != RESET)
     67          //	{
     68          //		rx_len = USART1->SR;
     69          //        rx_len = USART1->DR;
     70          //		DMA_Cmd(DMA1_Channel5, DISABLE);                                    
     71          //        USART_ClearITPendingBit(USART1, USART_IT_IDLE);                       
     72          //        rx_len = usart1_rx_len - DMA_GetCurrDataCounter(DMA1_Channel5);
     73          //		DMA_SetCurrDataCounter(DMA1_Channel5,usart1_rx_len);                
     74          //		DMA_Cmd(DMA1_Channel5, ENABLE);
     75          //	}
     76          //}
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void dma_tx_config(DMA_Stream_TypeDef* DMAy_Streamx,u32 peripheral_addr,u32 memory_addr,u16 data_length)
     79          {
   \                     dma_tx_config: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x001D             MOVS     R5,R3
     80            DMA_InitTypeDef DMA_InitStructure;
     81            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);	                    //DMA使能     stm32f103 only have one DMA1                                                                             
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0xF45F 0x0080      MOVS     R0,#+4194304
   \       0x12   0x....'....        BL       RCC_AHB1PeriphClockCmd
     82            DMA_DeInit(DMAy_Streamx);                                                                                                       
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x....'....        BL       DMA_DeInit
     83            DMA_InitStructure.DMA_Channel = DMA_Channel_4;
   \       0x1C   0xF05F 0x6000      MOVS     R0,#+134217728
   \       0x20   0x9000             STR      R0,[SP, #+0]
     84            DMA_InitStructure.DMA_PeripheralBaseAddr = peripheral_addr;             //外設地址 給DMA的目的初始位址 (USART的Data register)  
   \       0x22   0x9601             STR      R6,[SP, #+4]
     85            DMA_InitStructure.DMA_Memory0BaseAddr =memory_addr;                      //内存地址 內存的Buf array位址(usart1_dma_tx_buf)
   \       0x24   0x9702             STR      R7,[SP, #+8]
     86            DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;                      //傳輸方向：内存到外設（外設作為目的地）
   \       0x26   0x2040             MOVS     R0,#+64
   \       0x28   0x9003             STR      R0,[SP, #+12]
     87            DMA_InitStructure.DMA_BufferSize = data_length;                         //傳輸長度                      
   \       0x2A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \       0x2C   0x9504             STR      R5,[SP, #+16]
     88            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;        //外設地址不變 DMA只與USART1建立聯絡     
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x9005             STR      R0,[SP, #+20]
     89            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                 //内存地址自增  
   \       0x32   0xF44F 0x6080      MOV      R0,#+1024
   \       0x36   0x9006             STR      R0,[SP, #+24]
     90            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //字節傳輸  
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x9007             STR      R0,[SP, #+28]
     91            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;         //字節傳輸 一次傳輸8個BITS
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x9008             STR      R0,[SP, #+32]
     92            DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;                           //正常模式（非循環），只傳輸一次，如一次傳輸完成，下次傳輸则重新配置（關閉后再使能）其地址及長度等                                    
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0x9009             STR      R0,[SP, #+36]
     93            DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;             
   \       0x44   0xF45F 0x3040      MOVS     R0,#+196608
   \       0x48   0x900A             STR      R0,[SP, #+40]
     94            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0x900B             STR      R0,[SP, #+44]
     95            //DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
     96            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
   \       0x4E   0x2001             MOVS     R0,#+1
   \       0x50   0x900C             STR      R0,[SP, #+48]
     97            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x900D             STR      R0,[SP, #+52]
     98            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x900E             STR      R0,[SP, #+56]
     99            
    100            //DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;                            //禁止内存到内存傳輸                                     
    101            DMA_Init(DMAy_Streamx, &DMA_InitStructure);     
   \       0x5A   0x4669             MOV      R1,SP
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0x....'....        BL       DMA_Init
    102            
    103            DMA_ITConfig(DMAy_Streamx,DMA_IT_TC,ENABLE);
   \       0x62   0x2201             MOVS     R2,#+1
   \       0x64   0x2110             MOVS     R1,#+16
   \       0x66   0x0020             MOVS     R0,R4
   \       0x68   0x....'....        BL       DMA_ITConfig
    104            //    DMA_ITConfig(DMA_CHx,DMA1_IT_TC4,ENABLE);                             //發送完成中斷使能
    105            
    106            //    NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream6_IRQn;
    107            //    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;
    108            //    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		
    109            //    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			
    110            //    NVIC_Init(&NVIC_InitStructure);	
    111          }
   \       0x6C   0xB00F             ADD      SP,SP,#+60
   \       0x6E   0xBDF0             POP      {R4-R7,PC}       ;; return
    112          //void dma_rx_config(DMA_Channel_TypeDef* DMA_CHx,u32 peripheral_addr,u32 memory_addr,u16 data_length)
    113          //{
    114          ////    NVIC_InitTypeDef NVIC_InitStructure;
    115          //    DMA_InitTypeDef DMA_InitStructure;
    116          //    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    117          //    DMA_DeInit(DMA_CHx);  
    118          //    DMA_InitStructure.DMA_PeripheralBaseAddr = peripheral_addr;  
    119          //    DMA_InitStructure.DMA_MemoryBaseAddr = memory_addr;  
    120          //    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;                    
    121          //    DMA_InitStructure.DMA_BufferSize = data_length;  
    122          //    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;  
    123          //    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 
    124          //    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; 
    125          //    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 
    126          //    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;                                      
    127          //    DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 
    128          //    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;  
    129          //    DMA_Init(DMA_CHx, &DMA_InitStructure);    
    130          //    
    131          //    DMA_SetCurrDataCounter(DMA_CHx,usart1_rx_len);
    132          
    133          ////    DMA_ITConfig(DMA_CHx,DMA_IT_TC,ENABLE);
    134          ////    DMA_ITConfig(DMA_CHx,DMA1_IT_TC5,ENABLE); 
    135          
    136          ////    NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn;
    137          ////    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;
    138          ////    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;		
    139          ////    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			
    140          ////    NVIC_Init(&NVIC_InitStructure);	
    141          //    
    142          //    DMA_Cmd(DMA_CHx, ENABLE);
    143          //}
    144          

   \                                 In section .text, align 2, keep-with-next
    145          void usart1_init(u32 bound)
    146          {
   \                     usart1_init: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x0004             MOVS     R4,R0
    147            GPIO_InitTypeDef   GPIO_InitStructure;   //初始化GPIO
    148            USART_InitTypeDef  USART_InitStructure;  //初始化Usart
    149            
    150            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);   //使能GPIOA
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x....'....        BL       RCC_AHB1PeriphClockCmd
    151            RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);   //使能USART2
   \        0xE   0x2101             MOVS     R1,#+1
   \       0x10   0x2010             MOVS     R0,#+16
   \       0x12   0x....'....        BL       RCC_APB2PeriphClockCmd
    152            
    153            GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
   \       0x16   0x....'....        LDR.W    R5,??DataTable8_4  ;; 0x40020000
   \       0x1A   0x2207             MOVS     R2,#+7
   \       0x1C   0x2109             MOVS     R1,#+9
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x....'....        BL       GPIO_PinAFConfig
    154            GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
   \       0x24   0x2207             MOVS     R2,#+7
   \       0x26   0x210A             MOVS     R1,#+10
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0x....'....        BL       GPIO_PinAFConfig
    155            
    156            
    157            //USART1 Tx(PA.09) 
    158            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; 
   \       0x2E   0xF44F 0x7000      MOV      R0,#+512
   \       0x32   0x9000             STR      R0,[SP, #+0]
    159            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
   \       0x34   0x2002             MOVS     R0,#+2
   \       0x36   0xF88D 0x0005      STRB     R0,[SP, #+5]
    160            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;  // represent as a usart port 
   \       0x3A   0x2002             MOVS     R0,#+2
   \       0x3C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    161            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0xF88D 0x0006      STRB     R0,[SP, #+6]
    162            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0x0028             MOVS     R0,R5
   \       0x4A   0x....'....        BL       GPIO_Init
    163            //USART1 Rx(PA.10) 
    164            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
   \       0x4E   0xF44F 0x6080      MOV      R0,#+1024
   \       0x52   0x9000             STR      R0,[SP, #+0]
    165            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
   \       0x54   0x2002             MOVS     R0,#+2
   \       0x56   0xF88D 0x0005      STRB     R0,[SP, #+5]
    166            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \       0x5A   0x2001             MOVS     R0,#+1
   \       0x5C   0xF88D 0x0006      STRB     R0,[SP, #+6]
    167            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; // allow low voltage or high voltage 
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xF88D 0x0004      STRB     R0,[SP, #+4]
    168            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x66   0x4669             MOV      R1,SP
   \       0x68   0x0028             MOVS     R0,R5
   \       0x6A   0x....'....        BL       GPIO_Init
    169            
    170            //USART_InitTypeDef USART_InitStructure;
    171            USART_InitStructure.USART_BaudRate = bound; 
   \       0x6E   0x9402             STR      R4,[SP, #+8]
    172            USART_InitStructure.USART_WordLength = USART_WordLength_8b; 
   \       0x70   0x2000             MOVS     R0,#+0
   \       0x72   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    173            USART_InitStructure.USART_StopBits = USART_StopBits_1; 
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    174            USART_InitStructure.USART_Parity = USART_Parity_No; 
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    175            USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    176            USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; 
   \       0x88   0x200C             MOVS     R0,#+12
   \       0x8A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    177            USART_Init(USART1, &USART_InitStructure);
   \       0x8E   0x....'....        LDR.W    R4,??DataTable8_5  ;; 0x40011000
   \       0x92   0xA902             ADD      R1,SP,#+8
   \       0x94   0x0020             MOVS     R0,R4
   \       0x96   0x....'....        BL       USART_Init
    178            
    179            USART_Cmd(USART1, ENABLE);   
   \       0x9A   0x2101             MOVS     R1,#+1
   \       0x9C   0x0020             MOVS     R0,R4
   \       0x9E   0x....'....        BL       USART_Cmd
    180            USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE); //開啟usart的DMA傳輸功能
   \       0xA2   0x2201             MOVS     R2,#+1
   \       0xA4   0x2180             MOVS     R1,#+128
   \       0xA6   0x0020             MOVS     R0,R4
   \       0xA8   0x....'....        BL       USART_DMACmd
    181            USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE); 
   \       0xAC   0x2201             MOVS     R2,#+1
   \       0xAE   0x2140             MOVS     R1,#+64
   \       0xB0   0x0020             MOVS     R0,R4
   \       0xB2   0x....'....        BL       USART_DMACmd
    182            USART_ITConfig(USART1, USART_IT_IDLE, ENABLE);
   \       0xB6   0x2201             MOVS     R2,#+1
   \       0xB8   0xF240 0x4124      MOVW     R1,#+1060
   \       0xBC   0x0020             MOVS     R0,R4
   \       0xBE   0x....'....        BL       USART_ITConfig
    183            
    184            dma_tx_config(DMA2_Stream7,(uint32_t)&USART1->DR,(uint32_t)usart1_dma_tx_buf,usart1_tx_len); //設定外設USART1->DR而usart1_dma_tx_buf為資料初始位址 也就是我們上位機的資料
   \       0xC2   0xF44F 0x6380      MOV      R3,#+1024
   \       0xC6   0x....'....        LDR.W    R2,??DataTable8_3
   \       0xCA   0x....'....        LDR.W    R1,??DataTable8_6  ;; 0x40011004
   \       0xCE   0x....'....        LDR.W    R0,??DataTable8  ;; 0x400264b8
   \       0xD2   0x....'....        BL       dma_tx_config
    185            //    dma_rx_config(DMA1_Channel5,(u32)&USART1->DR,(u32)usart1_dma_rx_buf,usart1_rx_len);
    186            
    187            //    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    188            //    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;
    189            //    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;		
    190            //    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			
    191            //    NVIC_Init(&NVIC_InitStructure);	
    192          }
   \       0xD6   0xB007             ADD      SP,SP,#+28
   \       0xD8   0xBD30             POP      {R4,R5,PC}       ;; return
    193          
    194          
    195          /**********************************ANO**********************************/
    196          
    197          #define BYTE0(dwTemp)       ( *( (char *)(&dwTemp)    ) )
    198          #define BYTE1(dwTemp)       ( *( (char *)(&dwTemp) + 1) )
    199          #define BYTE2(dwTemp)       ( *( (char *)(&dwTemp) + 2) )
    200          #define BYTE3(dwTemp)       ( *( (char *)(&dwTemp) + 3) )
    201          

   \                                 In section .bss, align 4
    202          uint8_t data_to_send[100];
   \                     data_to_send:
   \        0x0                      DS8 100

   \                                 In section .text, align 2, keep-with-next
    203          void ANO_DT_Send_Status(void)                   
    204          {
   \                     ANO_DT_Send_Status: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    205            u8 _cnt=0;
   \        0x2   0x2500             MOVS     R5,#+0
    206            vs16 _temp;
    207            vs32 _temp2;
    208            u8 sum = 0;
   \        0x4   0x2000             MOVS     R0,#+0
    209            u8 i;
    210            data_to_send[_cnt++]=0xAA;
   \        0x6   0x....'....        LDR.W    R4,??DataTable8_7
   \        0xA   0x20AA             MOVS     R0,#+170
   \        0xC   0x0029             MOVS     R1,R5
   \        0xE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x10   0x5460             STRB     R0,[R4, R1]
   \       0x12   0x1C6D             ADDS     R5,R5,#+1
    211            data_to_send[_cnt++]=0xAA;
   \       0x14   0x20AA             MOVS     R0,#+170
   \       0x16   0x0029             MOVS     R1,R5
   \       0x18   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x1A   0x5460             STRB     R0,[R4, R1]
   \       0x1C   0x1C6D             ADDS     R5,R5,#+1
    212            data_to_send[_cnt++]=0x01;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0x0029             MOVS     R1,R5
   \       0x22   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x24   0x5460             STRB     R0,[R4, R1]
   \       0x26   0x1C6D             ADDS     R5,R5,#+1
    213            data_to_send[_cnt++]=0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x0029             MOVS     R1,R5
   \       0x2C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x2E   0x5460             STRB     R0,[R4, R1]
   \       0x30   0x1C6D             ADDS     R5,R5,#+1
    214            
    215            _temp = (int)(att.rol*100);                     
   \       0x32   0x....'....        LDR.W    R6,??DataTable8_8  ;; 0x42c80000
   \       0x36   0x....'....        LDR.W    R7,??DataTable8_9
   \       0x3A   0x6878             LDR      R0,[R7, #+4]
   \       0x3C   0x0031             MOVS     R1,R6
   \       0x3E   0x....'....        BL       __aeabi_fmul
   \       0x42   0x....'....        BL       __aeabi_f2iz
   \       0x46   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    216            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x4A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x4E   0x0029             MOVS     R1,R5
   \       0x50   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x52   0x5460             STRB     R0,[R4, R1]
   \       0x54   0x1C6D             ADDS     R5,R5,#+1
    217            data_to_send[_cnt++]=BYTE0(_temp);
   \       0x56   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x5A   0x0029             MOVS     R1,R5
   \       0x5C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x5E   0x5460             STRB     R0,[R4, R1]
   \       0x60   0x1C6D             ADDS     R5,R5,#+1
    218            
    219            _temp = (int)(att.pit*100);                      
   \       0x62   0x6838             LDR      R0,[R7, #+0]
   \       0x64   0x0031             MOVS     R1,R6
   \       0x66   0x....'....        BL       __aeabi_fmul
   \       0x6A   0x....'....        BL       __aeabi_f2iz
   \       0x6E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    220            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x72   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x76   0x0029             MOVS     R1,R5
   \       0x78   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x7A   0x5460             STRB     R0,[R4, R1]
   \       0x7C   0x1C6D             ADDS     R5,R5,#+1
    221            data_to_send[_cnt++]=BYTE0(_temp);
   \       0x7E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x82   0x0029             MOVS     R1,R5
   \       0x84   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x86   0x5460             STRB     R0,[R4, R1]
   \       0x88   0x1C6D             ADDS     R5,R5,#+1
    222            
    223            _temp = (int)(att.yaw*100);                     
   \       0x8A   0x68B8             LDR      R0,[R7, #+8]
   \       0x8C   0x0031             MOVS     R1,R6
   \       0x8E   0x....'....        BL       __aeabi_fmul
   \       0x92   0x....'....        BL       __aeabi_f2iz
   \       0x96   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    224            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x9A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x9E   0x0029             MOVS     R1,R5
   \       0xA0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xA2   0x5460             STRB     R0,[R4, R1]
   \       0xA4   0x1C6D             ADDS     R5,R5,#+1
    225            data_to_send[_cnt++]=BYTE0(_temp);
   \       0xA6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xAA   0x0029             MOVS     R1,R5
   \       0xAC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xAE   0x5460             STRB     R0,[R4, R1]
   \       0xB0   0x1C6D             ADDS     R5,R5,#+1
    226            
    227            _temp2 = (int32_t)(100*99.9);       		
   \       0xB2   0xF242 0x7006      MOVW     R0,#+9990
   \       0xB6   0x9000             STR      R0,[SP, #+0]
    228            data_to_send[_cnt++]=BYTE3(_temp2);
   \       0xB8   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \       0xBC   0x0029             MOVS     R1,R5
   \       0xBE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xC0   0x5460             STRB     R0,[R4, R1]
   \       0xC2   0x1C6D             ADDS     R5,R5,#+1
    229            data_to_send[_cnt++]=BYTE2(_temp2);
   \       0xC4   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \       0xC8   0x0029             MOVS     R1,R5
   \       0xCA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xCC   0x5460             STRB     R0,[R4, R1]
   \       0xCE   0x1C6D             ADDS     R5,R5,#+1
    230            data_to_send[_cnt++]=BYTE1(_temp2);
   \       0xD0   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0xD4   0x0029             MOVS     R1,R5
   \       0xD6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xD8   0x5460             STRB     R0,[R4, R1]
   \       0xDA   0x1C6D             ADDS     R5,R5,#+1
    231            data_to_send[_cnt++]=BYTE0(_temp2);
   \       0xDC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xE0   0x0029             MOVS     R1,R5
   \       0xE2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xE4   0x5460             STRB     R0,[R4, R1]
   \       0xE6   0x1C6D             ADDS     R5,R5,#+1
    232            
    233            data_to_send[_cnt++]=0x01;  					
   \       0xE8   0x2001             MOVS     R0,#+1
   \       0xEA   0x0029             MOVS     R1,R5
   \       0xEC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xEE   0x5460             STRB     R0,[R4, R1]
   \       0xF0   0x1C6D             ADDS     R5,R5,#+1
    234            data_to_send[_cnt++]= 1;              
   \       0xF2   0x2001             MOVS     R0,#+1
   \       0xF4   0x0029             MOVS     R1,R5
   \       0xF6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xF8   0x5460             STRB     R0,[R4, R1]
   \       0xFA   0x1C6D             ADDS     R5,R5,#+1
    235            
    236            data_to_send[3] = _cnt-4;
   \       0xFC   0x1F28             SUBS     R0,R5,#+4
   \       0xFE   0x70E0             STRB     R0,[R4, #+3]
    237            sum = 0;
   \      0x100   0x2100             MOVS     R1,#+0
    238            for(i=0;i<_cnt;i++)
   \      0x102   0x2200             MOVS     R2,#+0
   \      0x104   0xE004             B.N      ??ANO_DT_Send_Status_0
    239              sum += data_to_send[i];
   \                     ??ANO_DT_Send_Status_1: (+1)
   \      0x106   0x0010             MOVS     R0,R2
   \      0x108   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x10A   0x5C20             LDRB     R0,[R4, R0]
   \      0x10C   0x1841             ADDS     R1,R0,R1
   \      0x10E   0x1C52             ADDS     R2,R2,#+1
   \                     ??ANO_DT_Send_Status_0: (+1)
   \      0x110   0x0010             MOVS     R0,R2
   \      0x112   0x002B             MOVS     R3,R5
   \      0x114   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x116   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x118   0x4298             CMP      R0,R3
   \      0x11A   0xD3F4             BCC.N    ??ANO_DT_Send_Status_1
    240            data_to_send[_cnt++]=sum;
   \      0x11C   0x0028             MOVS     R0,R5
   \      0x11E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x120   0x5421             STRB     R1,[R4, R0]
   \      0x122   0x1C6D             ADDS     R5,R5,#+1
    241            
    242            usart1_send((data_to_send),_cnt);  
   \      0x124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \      0x126   0x0029             MOVS     R1,R5
   \      0x128   0x0020             MOVS     R0,R4
   \      0x12A   0x....'....        BL       usart1_send
    243          }
   \      0x12E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    244          
    245          

   \                                 In section .text, align 2, keep-with-next
    246          void ANO_DT_Send_Senser(s16 a_x,s16 a_y,s16 a_z,s16 g_x,s16 g_y,s16 g_z,s16 m_x,s16 m_y,s16 m_z)
    247          {
   \                     ANO_DT_Send_Senser: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    248            u8 _cnt=0;
   \        0x2   0x2500             MOVS     R5,#+0
    249            vs16 _temp;
    250            u8 sum = 0;
   \        0x4   0x2400             MOVS     R4,#+0
    251            u8 i=0;
   \        0x6   0x2400             MOVS     R4,#+0
    252            data_to_send[_cnt++]=0xAA;
   \        0x8   0x....'....        LDR.W    R4,??DataTable8_7
   \        0xC   0x26AA             MOVS     R6,#+170
   \        0xE   0x002F             MOVS     R7,R5
   \       0x10   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \       0x12   0x55E6             STRB     R6,[R4, R7]
   \       0x14   0x1C6D             ADDS     R5,R5,#+1
    253            data_to_send[_cnt++]=0xAA;
   \       0x16   0x26AA             MOVS     R6,#+170
   \       0x18   0x002F             MOVS     R7,R5
   \       0x1A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \       0x1C   0x55E6             STRB     R6,[R4, R7]
   \       0x1E   0x1C6D             ADDS     R5,R5,#+1
    254            data_to_send[_cnt++]=0x02;
   \       0x20   0x2602             MOVS     R6,#+2
   \       0x22   0x002F             MOVS     R7,R5
   \       0x24   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \       0x26   0x55E6             STRB     R6,[R4, R7]
   \       0x28   0x1C6D             ADDS     R5,R5,#+1
    255            data_to_send[_cnt++]=0;
   \       0x2A   0x2600             MOVS     R6,#+0
   \       0x2C   0x002F             MOVS     R7,R5
   \       0x2E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \       0x30   0x55E6             STRB     R6,[R4, R7]
   \       0x32   0x1C6D             ADDS     R5,R5,#+1
    256            
    257            _temp = a_x;    
   \       0x34   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    258            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x38   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x3C   0x002E             MOVS     R6,R5
   \       0x3E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x40   0x55A0             STRB     R0,[R4, R6]
   \       0x42   0x1C6D             ADDS     R5,R5,#+1
    259            data_to_send[_cnt++]=BYTE0(_temp);
   \       0x44   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x48   0x002E             MOVS     R6,R5
   \       0x4A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x4C   0x55A0             STRB     R0,[R4, R6]
   \       0x4E   0x1C6D             ADDS     R5,R5,#+1
    260            _temp = a_y;
   \       0x50   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    261            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x54   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x58   0x0029             MOVS     R1,R5
   \       0x5A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x5C   0x5460             STRB     R0,[R4, R1]
   \       0x5E   0x1C6D             ADDS     R5,R5,#+1
    262            data_to_send[_cnt++]=BYTE0(_temp);
   \       0x60   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x64   0x0029             MOVS     R1,R5
   \       0x66   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x68   0x5460             STRB     R0,[R4, R1]
   \       0x6A   0x1C6D             ADDS     R5,R5,#+1
    263            _temp = a_z;
   \       0x6C   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    264            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x70   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x74   0x0029             MOVS     R1,R5
   \       0x76   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x78   0x5460             STRB     R0,[R4, R1]
   \       0x7A   0x1C6D             ADDS     R5,R5,#+1
    265            data_to_send[_cnt++]=BYTE0(_temp);
   \       0x7C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x80   0x0029             MOVS     R1,R5
   \       0x82   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x84   0x5460             STRB     R0,[R4, R1]
   \       0x86   0x1C6D             ADDS     R5,R5,#+1
    266            
    267            _temp = g_x;
   \       0x88   0xF8AD 0x3000      STRH     R3,[SP, #+0]
    268            data_to_send[_cnt++]=BYTE1(_temp);
   \       0x8C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x90   0x0029             MOVS     R1,R5
   \       0x92   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x94   0x5460             STRB     R0,[R4, R1]
   \       0x96   0x1C6D             ADDS     R5,R5,#+1
    269            data_to_send[_cnt++]=BYTE0(_temp);
   \       0x98   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x9C   0x0029             MOVS     R1,R5
   \       0x9E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xA0   0x5460             STRB     R0,[R4, R1]
   \       0xA2   0x1C6D             ADDS     R5,R5,#+1
    270            _temp = g_y;
   \       0xA4   0xF9BD 0x0018      LDRSH    R0,[SP, #+24]
   \       0xA8   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    271            data_to_send[_cnt++]=BYTE1(_temp);
   \       0xAC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0xB0   0x0029             MOVS     R1,R5
   \       0xB2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xB4   0x5460             STRB     R0,[R4, R1]
   \       0xB6   0x1C6D             ADDS     R5,R5,#+1
    272            data_to_send[_cnt++]=BYTE0(_temp);
   \       0xB8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xBC   0x0029             MOVS     R1,R5
   \       0xBE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xC0   0x5460             STRB     R0,[R4, R1]
   \       0xC2   0x1C6D             ADDS     R5,R5,#+1
    273            _temp = g_z;
   \       0xC4   0xF9BD 0x001C      LDRSH    R0,[SP, #+28]
   \       0xC8   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    274            data_to_send[_cnt++]=BYTE1(_temp);
   \       0xCC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0xD0   0x0029             MOVS     R1,R5
   \       0xD2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xD4   0x5460             STRB     R0,[R4, R1]
   \       0xD6   0x1C6D             ADDS     R5,R5,#+1
    275            data_to_send[_cnt++]=BYTE0(_temp);
   \       0xD8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xDC   0x0029             MOVS     R1,R5
   \       0xDE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xE0   0x5460             STRB     R0,[R4, R1]
   \       0xE2   0x1C6D             ADDS     R5,R5,#+1
    276            
    277            _temp = m_x;
   \       0xE4   0xF9BD 0x0020      LDRSH    R0,[SP, #+32]
   \       0xE8   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    278            data_to_send[_cnt++]=BYTE1(_temp);
   \       0xEC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0xF0   0x0029             MOVS     R1,R5
   \       0xF2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xF4   0x5460             STRB     R0,[R4, R1]
   \       0xF6   0x1C6D             ADDS     R5,R5,#+1
    279            data_to_send[_cnt++]=BYTE0(_temp);
   \       0xF8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xFC   0x0029             MOVS     R1,R5
   \       0xFE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x100   0x5460             STRB     R0,[R4, R1]
   \      0x102   0x1C6D             ADDS     R5,R5,#+1
    280            _temp = m_y;
   \      0x104   0xF9BD 0x0024      LDRSH    R0,[SP, #+36]
   \      0x108   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    281            data_to_send[_cnt++]=BYTE1(_temp);
   \      0x10C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \      0x110   0x0029             MOVS     R1,R5
   \      0x112   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x114   0x5460             STRB     R0,[R4, R1]
   \      0x116   0x1C6D             ADDS     R5,R5,#+1
    282            data_to_send[_cnt++]=BYTE0(_temp);
   \      0x118   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \      0x11C   0x0029             MOVS     R1,R5
   \      0x11E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x120   0x5460             STRB     R0,[R4, R1]
   \      0x122   0x1C6D             ADDS     R5,R5,#+1
    283            _temp = m_z;
   \      0x124   0xF9BD 0x0028      LDRSH    R0,[SP, #+40]
   \      0x128   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    284            data_to_send[_cnt++]=BYTE1(_temp);
   \      0x12C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \      0x130   0x0029             MOVS     R1,R5
   \      0x132   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x134   0x5460             STRB     R0,[R4, R1]
   \      0x136   0x1C6D             ADDS     R5,R5,#+1
    285            data_to_send[_cnt++]=BYTE0(_temp);
   \      0x138   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \      0x13C   0x0029             MOVS     R1,R5
   \      0x13E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x140   0x5460             STRB     R0,[R4, R1]
   \      0x142   0x1C6D             ADDS     R5,R5,#+1
    286            
    287            data_to_send[3] = _cnt-4;
   \      0x144   0x1F28             SUBS     R0,R5,#+4
   \      0x146   0x70E0             STRB     R0,[R4, #+3]
    288            
    289            sum = 0;
   \      0x148   0x2100             MOVS     R1,#+0
    290            for(i=0;i<_cnt;i++)
   \      0x14A   0x2200             MOVS     R2,#+0
   \      0x14C   0xE004             B.N      ??ANO_DT_Send_Senser_0
    291              sum += data_to_send[i];
   \                     ??ANO_DT_Send_Senser_1: (+1)
   \      0x14E   0x0010             MOVS     R0,R2
   \      0x150   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x152   0x5C20             LDRB     R0,[R4, R0]
   \      0x154   0x1841             ADDS     R1,R0,R1
   \      0x156   0x1C52             ADDS     R2,R2,#+1
   \                     ??ANO_DT_Send_Senser_0: (+1)
   \      0x158   0x0010             MOVS     R0,R2
   \      0x15A   0x002B             MOVS     R3,R5
   \      0x15C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x15E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x160   0x4298             CMP      R0,R3
   \      0x162   0xD3F4             BCC.N    ??ANO_DT_Send_Senser_1
    292            data_to_send[_cnt++] = sum;
   \      0x164   0x0028             MOVS     R0,R5
   \      0x166   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x168   0x5421             STRB     R1,[R4, R0]
   \      0x16A   0x1C6D             ADDS     R5,R5,#+1
    293            
    294            usart1_send((data_to_send),_cnt);  
   \      0x16C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \      0x16E   0x0029             MOVS     R1,R5
   \      0x170   0x0020             MOVS     R0,R4
   \      0x172   0x....'....        BL       usart1_send
    295          }
   \      0x176   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    296          

   \                                 In section .text, align 2, keep-with-next
    297          void ANO_DT_Send_RCData(u16 thr,u16 yaw,u16 rol,u16 pit,u16 aux1,u16 aux2,u16 aux3,u16 aux4,u16 aux5,u16 aux6)
    298          {
   \                     ANO_DT_Send_RCData: (+1)
   \        0x0   0xB53F             PUSH     {R0-R5,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    299            u8 _cnt=0;
   \        0x4   0x2100             MOVS     R1,#+0
    300            u8 i=0;
   \        0x6   0x2000             MOVS     R0,#+0
    301            u8 sum = 0;
   \        0x8   0x2000             MOVS     R0,#+0
    302            data_to_send[_cnt++]=0xAA;
   \        0xA   0x....'....        LDR.W    R0,??DataTable8_7
   \        0xE   0x22AA             MOVS     R2,#+170
   \       0x10   0x000B             MOVS     R3,R1
   \       0x12   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x14   0x54C2             STRB     R2,[R0, R3]
   \       0x16   0x1C49             ADDS     R1,R1,#+1
    303            data_to_send[_cnt++]=0xAA;
   \       0x18   0x22AA             MOVS     R2,#+170
   \       0x1A   0x000B             MOVS     R3,R1
   \       0x1C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x1E   0x54C2             STRB     R2,[R0, R3]
   \       0x20   0x1C49             ADDS     R1,R1,#+1
    304            data_to_send[_cnt++]=0x03;
   \       0x22   0x2203             MOVS     R2,#+3
   \       0x24   0x000B             MOVS     R3,R1
   \       0x26   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x28   0x54C2             STRB     R2,[R0, R3]
   \       0x2A   0x1C49             ADDS     R1,R1,#+1
    305            data_to_send[_cnt++]=0;
   \       0x2C   0x2200             MOVS     R2,#+0
   \       0x2E   0x000B             MOVS     R3,R1
   \       0x30   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x32   0x54C2             STRB     R2,[R0, R3]
   \       0x34   0x1C49             ADDS     R1,R1,#+1
    306            
    307            data_to_send[_cnt++]=BYTE1(thr);
   \       0x36   0xF89D 0x2005      LDRB     R2,[SP, #+5]
   \       0x3A   0x000B             MOVS     R3,R1
   \       0x3C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x3E   0x54C2             STRB     R2,[R0, R3]
   \       0x40   0x1C49             ADDS     R1,R1,#+1
    308            data_to_send[_cnt++]=BYTE0(thr);
   \       0x42   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \       0x46   0x000B             MOVS     R3,R1
   \       0x48   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x4A   0x54C2             STRB     R2,[R0, R3]
   \       0x4C   0x1C49             ADDS     R1,R1,#+1
    309            
    310            data_to_send[_cnt++]=BYTE1(yaw);
   \       0x4E   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \       0x52   0x000B             MOVS     R3,R1
   \       0x54   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x56   0x54C2             STRB     R2,[R0, R3]
   \       0x58   0x1C49             ADDS     R1,R1,#+1
    311            data_to_send[_cnt++]=BYTE0(yaw);
   \       0x5A   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \       0x5E   0x000B             MOVS     R3,R1
   \       0x60   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x62   0x54C2             STRB     R2,[R0, R3]
   \       0x64   0x1C49             ADDS     R1,R1,#+1
    312            
    313            data_to_send[_cnt++]=BYTE1(rol);
   \       0x66   0xF89D 0x200D      LDRB     R2,[SP, #+13]
   \       0x6A   0x000B             MOVS     R3,R1
   \       0x6C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x6E   0x54C2             STRB     R2,[R0, R3]
   \       0x70   0x1C49             ADDS     R1,R1,#+1
    314            data_to_send[_cnt++]=BYTE0(rol);
   \       0x72   0xF89D 0x200C      LDRB     R2,[SP, #+12]
   \       0x76   0x000B             MOVS     R3,R1
   \       0x78   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x7A   0x54C2             STRB     R2,[R0, R3]
   \       0x7C   0x1C49             ADDS     R1,R1,#+1
    315            
    316            data_to_send[_cnt++]=BYTE1(pit);
   \       0x7E   0xF89D 0x2011      LDRB     R2,[SP, #+17]
   \       0x82   0x000B             MOVS     R3,R1
   \       0x84   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x86   0x54C2             STRB     R2,[R0, R3]
   \       0x88   0x1C49             ADDS     R1,R1,#+1
    317            data_to_send[_cnt++]=BYTE0(pit);
   \       0x8A   0xF89D 0x2010      LDRB     R2,[SP, #+16]
   \       0x8E   0x000B             MOVS     R3,R1
   \       0x90   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x92   0x54C2             STRB     R2,[R0, R3]
   \       0x94   0x1C49             ADDS     R1,R1,#+1
    318            
    319            data_to_send[_cnt++]=BYTE1(aux1);
   \       0x96   0xF89D 0x2021      LDRB     R2,[SP, #+33]
   \       0x9A   0x000B             MOVS     R3,R1
   \       0x9C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x9E   0x54C2             STRB     R2,[R0, R3]
   \       0xA0   0x1C49             ADDS     R1,R1,#+1
    320            data_to_send[_cnt++]=BYTE0(aux1);
   \       0xA2   0xF89D 0x2020      LDRB     R2,[SP, #+32]
   \       0xA6   0x000B             MOVS     R3,R1
   \       0xA8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xAA   0x54C2             STRB     R2,[R0, R3]
   \       0xAC   0x1C49             ADDS     R1,R1,#+1
    321            
    322            data_to_send[_cnt++]=BYTE1(aux2);
   \       0xAE   0xF89D 0x2025      LDRB     R2,[SP, #+37]
   \       0xB2   0x000B             MOVS     R3,R1
   \       0xB4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xB6   0x54C2             STRB     R2,[R0, R3]
   \       0xB8   0x1C49             ADDS     R1,R1,#+1
    323            data_to_send[_cnt++]=BYTE0(aux2);
   \       0xBA   0xF89D 0x2024      LDRB     R2,[SP, #+36]
   \       0xBE   0x000B             MOVS     R3,R1
   \       0xC0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xC2   0x54C2             STRB     R2,[R0, R3]
   \       0xC4   0x1C49             ADDS     R1,R1,#+1
    324            
    325            data_to_send[_cnt++]=BYTE1(aux3);
   \       0xC6   0xF89D 0x2029      LDRB     R2,[SP, #+41]
   \       0xCA   0x000B             MOVS     R3,R1
   \       0xCC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xCE   0x54C2             STRB     R2,[R0, R3]
   \       0xD0   0x1C49             ADDS     R1,R1,#+1
    326            data_to_send[_cnt++]=BYTE0(aux3);
   \       0xD2   0xF89D 0x2028      LDRB     R2,[SP, #+40]
   \       0xD6   0x000B             MOVS     R3,R1
   \       0xD8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xDA   0x54C2             STRB     R2,[R0, R3]
   \       0xDC   0x1C49             ADDS     R1,R1,#+1
    327            
    328            data_to_send[_cnt++]=BYTE1(aux4);
   \       0xDE   0xF89D 0x202D      LDRB     R2,[SP, #+45]
   \       0xE2   0x000B             MOVS     R3,R1
   \       0xE4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xE6   0x54C2             STRB     R2,[R0, R3]
   \       0xE8   0x1C49             ADDS     R1,R1,#+1
    329            data_to_send[_cnt++]=BYTE0(aux4);
   \       0xEA   0xF89D 0x202C      LDRB     R2,[SP, #+44]
   \       0xEE   0x000B             MOVS     R3,R1
   \       0xF0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xF2   0x54C2             STRB     R2,[R0, R3]
   \       0xF4   0x1C49             ADDS     R1,R1,#+1
    330            
    331            data_to_send[_cnt++]=BYTE1(aux5);
   \       0xF6   0xF89D 0x2031      LDRB     R2,[SP, #+49]
   \       0xFA   0x000B             MOVS     R3,R1
   \       0xFC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xFE   0x54C2             STRB     R2,[R0, R3]
   \      0x100   0x1C49             ADDS     R1,R1,#+1
    332            data_to_send[_cnt++]=BYTE0(aux5);
   \      0x102   0xF89D 0x2030      LDRB     R2,[SP, #+48]
   \      0x106   0x000B             MOVS     R3,R1
   \      0x108   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x10A   0x54C2             STRB     R2,[R0, R3]
   \      0x10C   0x1C49             ADDS     R1,R1,#+1
    333            
    334            data_to_send[_cnt++]=BYTE1(aux6);
   \      0x10E   0xF89D 0x2035      LDRB     R2,[SP, #+53]
   \      0x112   0x000B             MOVS     R3,R1
   \      0x114   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x116   0x54C2             STRB     R2,[R0, R3]
   \      0x118   0x1C49             ADDS     R1,R1,#+1
    335            data_to_send[_cnt++]=BYTE0(aux6);
   \      0x11A   0xF89D 0x2034      LDRB     R2,[SP, #+52]
   \      0x11E   0x000B             MOVS     R3,R1
   \      0x120   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x122   0x54C2             STRB     R2,[R0, R3]
   \      0x124   0x1C49             ADDS     R1,R1,#+1
    336            
    337            data_to_send[3] = _cnt-4;
   \      0x126   0x1F0A             SUBS     R2,R1,#+4
   \      0x128   0x70C2             STRB     R2,[R0, #+3]
    338            
    339            sum = 0;
   \      0x12A   0x2400             MOVS     R4,#+0
    340            for(i=0;i<_cnt;i++)
   \      0x12C   0x2300             MOVS     R3,#+0
   \      0x12E   0xE004             B.N      ??ANO_DT_Send_RCData_0
    341              sum += data_to_send[i];
   \                     ??ANO_DT_Send_RCData_1: (+1)
   \      0x130   0x001A             MOVS     R2,R3
   \      0x132   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x134   0x5C82             LDRB     R2,[R0, R2]
   \      0x136   0x1914             ADDS     R4,R2,R4
   \      0x138   0x1C5B             ADDS     R3,R3,#+1
   \                     ??ANO_DT_Send_RCData_0: (+1)
   \      0x13A   0x001A             MOVS     R2,R3
   \      0x13C   0x000D             MOVS     R5,R1
   \      0x13E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x140   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \      0x142   0x42AA             CMP      R2,R5
   \      0x144   0xD3F4             BCC.N    ??ANO_DT_Send_RCData_1
    342            
    343            data_to_send[_cnt++]=sum;
   \      0x146   0x000A             MOVS     R2,R1
   \      0x148   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x14A   0x5484             STRB     R4,[R0, R2]
   \      0x14C   0x1C49             ADDS     R1,R1,#+1
    344            
    345            usart1_send((data_to_send),_cnt);  
   \      0x14E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x150   0x....'....        BL       usart1_send
    346          }
   \      0x154   0xB005             ADD      SP,SP,#+20
   \      0x156   0xBD30             POP      {R4,R5,PC}       ;; return
    347          
    348          

   \                                 In section .text, align 2, keep-with-next
    349          void ANO_DT_Send_Power(float votage, float current)
    350          {
   \                     ANO_DT_Send_Power: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x000E             MOVS     R6,R1
    351            u8 _cnt=0;
   \        0x4   0x2500             MOVS     R5,#+0
    352            u16 temp;
    353            
    354            data_to_send[_cnt++]=0xAA;
   \        0x6   0x....             LDR.N    R4,??DataTable8_7
   \        0x8   0x21AA             MOVS     R1,#+170
   \        0xA   0x002A             MOVS     R2,R5
   \        0xC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \        0xE   0x54A1             STRB     R1,[R4, R2]
   \       0x10   0x1C6D             ADDS     R5,R5,#+1
    355            data_to_send[_cnt++]=0xAA;
   \       0x12   0x21AA             MOVS     R1,#+170
   \       0x14   0x002A             MOVS     R2,R5
   \       0x16   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x18   0x54A1             STRB     R1,[R4, R2]
   \       0x1A   0x1C6D             ADDS     R5,R5,#+1
    356            data_to_send[_cnt++]=0x05;
   \       0x1C   0x2105             MOVS     R1,#+5
   \       0x1E   0x002A             MOVS     R2,R5
   \       0x20   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x22   0x54A1             STRB     R1,[R4, R2]
   \       0x24   0x1C6D             ADDS     R5,R5,#+1
    357            data_to_send[_cnt++]=0;
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0x002A             MOVS     R2,R5
   \       0x2A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x2C   0x54A1             STRB     R1,[R4, R2]
   \       0x2E   0x1C6D             ADDS     R5,R5,#+1
    358            
    359            temp = (uint16_t)100*votage;
                        ^
Warning[Pa093]: implicit conversion from floating point to integer
   \       0x30   0x....             LDR.N    R7,??DataTable8_8  ;; 0x42c80000
   \       0x32   0x0039             MOVS     R1,R7
   \       0x34   0x....'....        BL       __aeabi_fmul
   \       0x38   0x....'....        BL       __aeabi_f2iz
   \       0x3C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    360            data_to_send[_cnt++]=BYTE1(temp);
   \       0x40   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x44   0x0029             MOVS     R1,R5
   \       0x46   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x48   0x5460             STRB     R0,[R4, R1]
   \       0x4A   0x1C6D             ADDS     R5,R5,#+1
    361            data_to_send[_cnt++]=BYTE0(temp);
   \       0x4C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x50   0x0029             MOVS     R1,R5
   \       0x52   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x54   0x5460             STRB     R0,[R4, R1]
   \       0x56   0x1C6D             ADDS     R5,R5,#+1
    362            temp = (uint16_t)100*current;
                        ^
Warning[Pa093]: implicit conversion from floating point to integer
   \       0x58   0x0030             MOVS     R0,R6
   \       0x5A   0x0039             MOVS     R1,R7
   \       0x5C   0x....'....        BL       __aeabi_fmul
   \       0x60   0x....'....        BL       __aeabi_f2iz
   \       0x64   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    363            data_to_send[_cnt++]=BYTE1(temp);
   \       0x68   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x6C   0x0029             MOVS     R1,R5
   \       0x6E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x70   0x5460             STRB     R0,[R4, R1]
   \       0x72   0x1C6D             ADDS     R5,R5,#+1
    364            data_to_send[_cnt++]=BYTE0(temp);
   \       0x74   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x78   0x0029             MOVS     R1,R5
   \       0x7A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x7C   0x5460             STRB     R0,[R4, R1]
   \       0x7E   0x1C6D             ADDS     R5,R5,#+1
    365            
    366            data_to_send[3] = _cnt-4;
   \       0x80   0x1F28             SUBS     R0,R5,#+4
   \       0x82   0x70E0             STRB     R0,[R4, #+3]
    367            
    368            u8 sum = 0;
   \       0x84   0x2100             MOVS     R1,#+0
    369            for(u8 i=0;i<_cnt;i++)
   \       0x86   0x2200             MOVS     R2,#+0
   \       0x88   0xE004             B.N      ??ANO_DT_Send_Power_0
    370              sum += data_to_send[i];
   \                     ??ANO_DT_Send_Power_1: (+1)
   \       0x8A   0x0010             MOVS     R0,R2
   \       0x8C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x8E   0x5C20             LDRB     R0,[R4, R0]
   \       0x90   0x1841             ADDS     R1,R0,R1
   \       0x92   0x1C52             ADDS     R2,R2,#+1
   \                     ??ANO_DT_Send_Power_0: (+1)
   \       0x94   0x0010             MOVS     R0,R2
   \       0x96   0x002B             MOVS     R3,R5
   \       0x98   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x9A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x9C   0x4298             CMP      R0,R3
   \       0x9E   0xD3F4             BCC.N    ??ANO_DT_Send_Power_1
    371            data_to_send[_cnt++]=sum;
   \       0xA0   0x0028             MOVS     R0,R5
   \       0xA2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xA4   0x5421             STRB     R1,[R4, R0]
   \       0xA6   0x1C6D             ADDS     R5,R5,#+1
    372            
    373            usart1_send((data_to_send),_cnt);  
   \       0xA8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \       0xAA   0x0029             MOVS     R1,R5
   \       0xAC   0x0020             MOVS     R0,R4
   \       0xAE   0x....'....        BL       usart1_send
    374          }
   \       0xB2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    375          
    376          /* 
    377          void ANO_DT_Send_User(    s16 user1,s16 user2,s16 user3,s16 user4,s16 user5,
    378          float user6,float user7,float user8,float user9,float user10,
    379          float user11,float user12,float user13,float user14,float user15)
    380          {
    381          u8 _cnt=0;
    382          vs16 _temp;
    383          float _temp_f;
    384          
    385          u8 sum = 0;
    386          u8 i=0;
    387          data_to_send[_cnt++]=0xAA;
    388          data_to_send[_cnt++]=0xAA;
    389          data_to_send[_cnt++]=0xF1;
    390          data_to_send[_cnt++]=0;
    391          
    392          //1-5  int16
    393          _temp = user1;    
    394          data_to_send[_cnt++]=BYTE1(_temp);
    395          data_to_send[_cnt++]=BYTE0(_temp);
    396          _temp = user2;
    397          data_to_send[_cnt++]=BYTE1(_temp);
    398          data_to_send[_cnt++]=BYTE0(_temp);
    399          _temp = user3;
    400          data_to_send[_cnt++]=BYTE1(_temp);
    401          data_to_send[_cnt++]=BYTE0(_temp);
    402          _temp = user4;    
    403          data_to_send[_cnt++]=BYTE1(_temp);
    404          data_to_send[_cnt++]=BYTE0(_temp);
    405          _temp = user5;
    406          data_to_send[_cnt++]=BYTE1(_temp);
    407          data_to_send[_cnt++]=BYTE0(_temp);
    408          
    409          //6-10 :float
    410          _temp_f = user6;
    411          data_to_send[_cnt++]=BYTE3(_temp_f);
    412          data_to_send[_cnt++]=BYTE2(_temp_f);
    413          data_to_send[_cnt++]=BYTE1(_temp_f);
    414          data_to_send[_cnt++]=BYTE0(_temp_f);
    415          _temp_f = user7;
    416          data_to_send[_cnt++]=BYTE3(_temp_f);
    417          data_to_send[_cnt++]=BYTE2(_temp_f);
    418          data_to_send[_cnt++]=BYTE1(_temp_f);
    419          data_to_send[_cnt++]=BYTE0(_temp_f);
    420          _temp_f = user8;
    421          data_to_send[_cnt++]=BYTE3(_temp_f);
    422          data_to_send[_cnt++]=BYTE2(_temp_f);
    423          data_to_send[_cnt++]=BYTE1(_temp_f);
    424          data_to_send[_cnt++]=BYTE0(_temp_f);
    425          _temp_f = user9;
    426          data_to_send[_cnt++]=BYTE3(_temp_f);
    427          data_to_send[_cnt++]=BYTE2(_temp_f);
    428          data_to_send[_cnt++]=BYTE1(_temp_f);
    429          data_to_send[_cnt++]=BYTE0(_temp_f);
    430          _temp_f = user10;
    431          data_to_send[_cnt++]=BYTE3(_temp_f);
    432          data_to_send[_cnt++]=BYTE2(_temp_f);
    433          data_to_send[_cnt++]=BYTE1(_temp_f);
    434          data_to_send[_cnt++]=BYTE0(_temp_f);
    435          
    436          
    437          _temp_f = user11;
    438          data_to_send[_cnt++]=BYTE3(_temp_f);
    439          data_to_send[_cnt++]=BYTE2(_temp_f);
    440          data_to_send[_cnt++]=BYTE1(_temp_f);
    441          data_to_send[_cnt++]=BYTE0(_temp_f);
    442          _temp_f = user12;
    443          data_to_send[_cnt++]=BYTE3(_temp_f);
    444          data_to_send[_cnt++]=BYTE2(_temp_f);
    445          data_to_send[_cnt++]=BYTE1(_temp_f);
    446          data_to_send[_cnt++]=BYTE0(_temp_f);
    447          _temp_f = user13;
    448          data_to_send[_cnt++]=BYTE3(_temp_f);
    449          data_to_send[_cnt++]=BYTE2(_temp_f);
    450          data_to_send[_cnt++]=BYTE1(_temp_f);
    451          data_to_send[_cnt++]=BYTE0(_temp_f);
    452          _temp_f = user14;
    453          data_to_send[_cnt++]=BYTE3(_temp_f);
    454          data_to_send[_cnt++]=BYTE2(_temp_f);
    455          data_to_send[_cnt++]=BYTE1(_temp_f);
    456          data_to_send[_cnt++]=BYTE0(_temp_f); 
    457          _temp_f = user15;
    458          data_to_send[_cnt++]=BYTE3(_temp_f);
    459          data_to_send[_cnt++]=BYTE2(_temp_f);
    460          data_to_send[_cnt++]=BYTE1(_temp_f);
    461          data_to_send[_cnt++]=BYTE0(_temp_f);
    462          
    463          data_to_send[3] = _cnt-4;
    464          
    465          sum = 0;
    466          for(i=0;i<_cnt;i++)
    467          sum += data_to_send[i];
    468          data_to_send[_cnt++] = sum;
    469          
    470          usart1_send((data_to_send),_cnt);  
    471          }
    472          */

   \                                 In section .text, align 2, keep-with-next
    473          void ANO_DT_Send_PWM_Motor(u16 M1,u16 M2,u16 M3,u16 M4,u16 M5,u16 M6,u16 M7,u16 M8)
    474          {
   \                     ANO_DT_Send_PWM_Motor: (+1)
   \        0x0   0xB53F             PUSH     {R0-R5,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    475            u8 _cnt=0;
   \        0x4   0x2100             MOVS     R1,#+0
    476            u8 i=0;
   \        0x6   0x2000             MOVS     R0,#+0
    477            u8 sum = 0;
   \        0x8   0x2300             MOVS     R3,#+0
    478            data_to_send[_cnt++]=0xAA;
   \        0xA   0x....             LDR.N    R0,??DataTable8_7
   \        0xC   0x22AA             MOVS     R2,#+170
   \        0xE   0x000C             MOVS     R4,R1
   \       0x10   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x12   0x5502             STRB     R2,[R0, R4]
   \       0x14   0x1C49             ADDS     R1,R1,#+1
    479            data_to_send[_cnt++]=0xAA;
   \       0x16   0x22AA             MOVS     R2,#+170
   \       0x18   0x000C             MOVS     R4,R1
   \       0x1A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x1C   0x5502             STRB     R2,[R0, R4]
   \       0x1E   0x1C49             ADDS     R1,R1,#+1
    480            data_to_send[_cnt++]=0x06;
   \       0x20   0x2206             MOVS     R2,#+6
   \       0x22   0x000C             MOVS     R4,R1
   \       0x24   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x26   0x5502             STRB     R2,[R0, R4]
   \       0x28   0x1C49             ADDS     R1,R1,#+1
    481            data_to_send[_cnt++]=0;
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0x000C             MOVS     R4,R1
   \       0x2E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x30   0x5502             STRB     R2,[R0, R4]
   \       0x32   0x1C49             ADDS     R1,R1,#+1
    482            
    483            data_to_send[_cnt++]=BYTE1(M1);
   \       0x34   0xF89D 0x2005      LDRB     R2,[SP, #+5]
   \       0x38   0x000C             MOVS     R4,R1
   \       0x3A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x3C   0x5502             STRB     R2,[R0, R4]
   \       0x3E   0x1C49             ADDS     R1,R1,#+1
    484            data_to_send[_cnt++]=BYTE0(M1);
   \       0x40   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \       0x44   0x000C             MOVS     R4,R1
   \       0x46   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x48   0x5502             STRB     R2,[R0, R4]
   \       0x4A   0x1C49             ADDS     R1,R1,#+1
    485            
    486            data_to_send[_cnt++]=BYTE1(M2);
   \       0x4C   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \       0x50   0x000C             MOVS     R4,R1
   \       0x52   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x54   0x5502             STRB     R2,[R0, R4]
   \       0x56   0x1C49             ADDS     R1,R1,#+1
    487            data_to_send[_cnt++]=BYTE0(M2);
   \       0x58   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \       0x5C   0x000C             MOVS     R4,R1
   \       0x5E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x60   0x5502             STRB     R2,[R0, R4]
   \       0x62   0x1C49             ADDS     R1,R1,#+1
    488            
    489            data_to_send[_cnt++]=BYTE1(M3);
   \       0x64   0xF89D 0x200D      LDRB     R2,[SP, #+13]
   \       0x68   0x000C             MOVS     R4,R1
   \       0x6A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x6C   0x5502             STRB     R2,[R0, R4]
   \       0x6E   0x1C49             ADDS     R1,R1,#+1
    490            data_to_send[_cnt++]=BYTE0(M3);
   \       0x70   0xF89D 0x200C      LDRB     R2,[SP, #+12]
   \       0x74   0x000C             MOVS     R4,R1
   \       0x76   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x78   0x5502             STRB     R2,[R0, R4]
   \       0x7A   0x1C49             ADDS     R1,R1,#+1
    491            
    492            data_to_send[_cnt++]=BYTE1(M4);
   \       0x7C   0xF89D 0x2011      LDRB     R2,[SP, #+17]
   \       0x80   0x000C             MOVS     R4,R1
   \       0x82   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x84   0x5502             STRB     R2,[R0, R4]
   \       0x86   0x1C49             ADDS     R1,R1,#+1
    493            data_to_send[_cnt++]=BYTE0(M4);
   \       0x88   0xF89D 0x2010      LDRB     R2,[SP, #+16]
   \       0x8C   0x000C             MOVS     R4,R1
   \       0x8E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x90   0x5502             STRB     R2,[R0, R4]
   \       0x92   0x1C49             ADDS     R1,R1,#+1
    494            
    495            data_to_send[_cnt++]=BYTE1(M5);
   \       0x94   0xF89D 0x2021      LDRB     R2,[SP, #+33]
   \       0x98   0x000C             MOVS     R4,R1
   \       0x9A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x9C   0x5502             STRB     R2,[R0, R4]
   \       0x9E   0x1C49             ADDS     R1,R1,#+1
    496            data_to_send[_cnt++]=BYTE0(M5);
   \       0xA0   0xF89D 0x2020      LDRB     R2,[SP, #+32]
   \       0xA4   0x000C             MOVS     R4,R1
   \       0xA6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xA8   0x5502             STRB     R2,[R0, R4]
   \       0xAA   0x1C49             ADDS     R1,R1,#+1
    497            
    498            data_to_send[_cnt++]=BYTE1(M6);
   \       0xAC   0xF89D 0x2025      LDRB     R2,[SP, #+37]
   \       0xB0   0x000C             MOVS     R4,R1
   \       0xB2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xB4   0x5502             STRB     R2,[R0, R4]
   \       0xB6   0x1C49             ADDS     R1,R1,#+1
    499            data_to_send[_cnt++]=BYTE0(M6);
   \       0xB8   0xF89D 0x2024      LDRB     R2,[SP, #+36]
   \       0xBC   0x000C             MOVS     R4,R1
   \       0xBE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xC0   0x5502             STRB     R2,[R0, R4]
   \       0xC2   0x1C49             ADDS     R1,R1,#+1
    500            
    501            data_to_send[_cnt++]=BYTE1(M7);
   \       0xC4   0xF89D 0x2029      LDRB     R2,[SP, #+41]
   \       0xC8   0x000C             MOVS     R4,R1
   \       0xCA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xCC   0x5502             STRB     R2,[R0, R4]
   \       0xCE   0x1C49             ADDS     R1,R1,#+1
    502            data_to_send[_cnt++]=BYTE0(M7);
   \       0xD0   0xF89D 0x2028      LDRB     R2,[SP, #+40]
   \       0xD4   0x000C             MOVS     R4,R1
   \       0xD6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xD8   0x5502             STRB     R2,[R0, R4]
   \       0xDA   0x1C49             ADDS     R1,R1,#+1
    503            
    504            data_to_send[_cnt++]=BYTE1(M8);
   \       0xDC   0xF89D 0x202D      LDRB     R2,[SP, #+45]
   \       0xE0   0x000C             MOVS     R4,R1
   \       0xE2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xE4   0x5502             STRB     R2,[R0, R4]
   \       0xE6   0x1C49             ADDS     R1,R1,#+1
    505            data_to_send[_cnt++]=BYTE0(M8);
   \       0xE8   0xF89D 0x202C      LDRB     R2,[SP, #+44]
   \       0xEC   0x000C             MOVS     R4,R1
   \       0xEE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0xF0   0x5502             STRB     R2,[R0, R4]
   \       0xF2   0x1C49             ADDS     R1,R1,#+1
    506            
    507            data_to_send[3] = _cnt-4;
   \       0xF4   0x1F0A             SUBS     R2,R1,#+4
   \       0xF6   0x70C2             STRB     R2,[R0, #+3]
    508            
    509            for(i=0;i<_cnt;i++) 
   \       0xF8   0x2400             MOVS     R4,#+0
   \       0xFA   0xE004             B.N      ??ANO_DT_Send_PWM_Motor_0
    510              sum += data_to_send[i];
   \                     ??ANO_DT_Send_PWM_Motor_1: (+1)
   \       0xFC   0x0022             MOVS     R2,R4
   \       0xFE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x100   0x5C82             LDRB     R2,[R0, R2]
   \      0x102   0x18D3             ADDS     R3,R2,R3
   \      0x104   0x1C64             ADDS     R4,R4,#+1
   \                     ??ANO_DT_Send_PWM_Motor_0: (+1)
   \      0x106   0x0022             MOVS     R2,R4
   \      0x108   0x000D             MOVS     R5,R1
   \      0x10A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x10C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \      0x10E   0x42AA             CMP      R2,R5
   \      0x110   0xD3F4             BCC.N    ??ANO_DT_Send_PWM_Motor_1
    511            data_to_send[_cnt++]=sum;
   \      0x112   0x000A             MOVS     R2,R1
   \      0x114   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x116   0x5483             STRB     R3,[R0, R2]
   \      0x118   0x1C49             ADDS     R1,R1,#+1
    512            
    513            usart1_send((data_to_send),_cnt);  	
   \      0x11A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x11C   0x....'....        BL       usart1_send
    514          }
   \      0x120   0xB005             ADD      SP,SP,#+20
   \      0x122   0xBD30             POP      {R4,R5,PC}       ;; return
    515          
    516          

   \                                 In section .text, align 2, keep-with-next
    517          void Anotc_SendData(void)
    518          {
   \                     Anotc_SendData: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    519            static uint8_t ANO_debug_cnt = 0;
    520            //printf("usart in ");
    521            ANO_debug_cnt++;
   \        0x4   0x....             LDR.N    R0,??DataTable8_10
   \        0x6   0x7801             LDRB     R1,[R0, #+0]
   \        0x8   0x1C49             ADDS     R1,R1,#+1
   \        0xA   0x7001             STRB     R1,[R0, #+0]
    522            switch(ANO_debug_cnt)
   \        0xC   0x7801             LDRB     R1,[R0, #+0]
   \        0xE   0x2901             CMP      R1,#+1
   \       0x10   0xD009             BEQ.N    ??Anotc_SendData_0
   \       0x12   0xD369             BCC.N    ??Anotc_SendData_1
   \       0x14   0x2903             CMP      R1,#+3
   \       0x16   0xD02B             BEQ.N    ??Anotc_SendData_2
   \       0x18   0xD308             BCC.N    ??Anotc_SendData_3
   \       0x1A   0x2905             CMP      R1,#+5
   \       0x1C   0xD049             BEQ.N    ??Anotc_SendData_4
   \       0x1E   0xD343             BCC.N    ??Anotc_SendData_5
   \       0x20   0x2906             CMP      R1,#+6
   \       0x22   0xD05E             BEQ.N    ??Anotc_SendData_6
   \       0x24   0xE060             B.N      ??Anotc_SendData_1
    523            {
    524            case 1:
    525              {
    526                ANO_DT_Send_Status();
   \                     ??Anotc_SendData_0: (+1)
   \       0x26   0x....'....        BL       ANO_DT_Send_Status
    527                break;
   \       0x2A   0xE05D             B.N      ??Anotc_SendData_7
    528              }
    529            case 2:
    530              {
    531                ANO_DT_Send_Senser(acc_raw.x,acc_raw.y,acc_raw.z,Mpu.deg_s.x,Mpu.deg_s.y,(encoder_x*30),0,0,0);//將gyro_z改成看Encoder的值
                                                                        ^
Warning[Pa093]: implicit conversion from floating point to integer

        ANO_DT_Send_Senser(acc_raw.x,acc_raw.y,acc_raw.z,Mpu.deg_s.x,Mpu.deg_s.y,(encoder_x*30),0,0,0);//將gyro_z改成看Encoder的值
                                                                     ^
"E:\STM32Project\Cubli_with_STM32F429\Cubli-with-STM32F429\Cubli\user\src\usart.c",531  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \                     ??Anotc_SendData_3: (+1)
   \       0x2C   0x....             LDR.N    R4,??DataTable8_11
   \       0x2E   0x....             LDR.N    R5,??DataTable8_12
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x9004             STR      R0,[SP, #+16]
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0x9003             STR      R0,[SP, #+12]
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x9002             STR      R0,[SP, #+8]
   \       0x3C   0x....             LDR.N    R0,??DataTable8_13
   \       0x3E   0x6800             LDR      R0,[R0, #+0]
   \       0x40   0x211E             MOVS     R1,#+30
   \       0x42   0xFB10 0xF001      SMULBB   R0,R0,R1
   \       0x46   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \       0x48   0x9001             STR      R0,[SP, #+4]
   \       0x4A   0x6868             LDR      R0,[R5, #+4]
   \       0x4C   0x....'....        BL       __aeabi_f2iz
   \       0x50   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0x6828             LDR      R0,[R5, #+0]
   \       0x56   0x....'....        BL       __aeabi_f2iz
   \       0x5A   0x0003             MOVS     R3,R0
   \       0x5C   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \       0x5E   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \       0x62   0xF9B4 0x1002      LDRSH    R1,[R4, #+2]
   \       0x66   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \       0x6A   0x....'....        BL       ANO_DT_Send_Senser
    532                break;
   \       0x6E   0xE03B             B.N      ??Anotc_SendData_7
    533              }
    534            case 3:
    535              {
    536                ANO_DT_Send_RCData(1100,1200,1300,1400,1500,1600,1700,1800,1900,1100);
   \                     ??Anotc_SendData_2: (+1)
   \       0x70   0xF240 0x404C      MOVW     R0,#+1100
   \       0x74   0x0001             MOVS     R1,R0
   \       0x76   0x9105             STR      R1,[SP, #+20]
   \       0x78   0xF240 0x716C      MOVW     R1,#+1900
   \       0x7C   0x9104             STR      R1,[SP, #+16]
   \       0x7E   0xF44F 0x61E1      MOV      R1,#+1800
   \       0x82   0x9103             STR      R1,[SP, #+12]
   \       0x84   0xF240 0x61A4      MOVW     R1,#+1700
   \       0x88   0x9102             STR      R1,[SP, #+8]
   \       0x8A   0xF44F 0x61C8      MOV      R1,#+1600
   \       0x8E   0x9101             STR      R1,[SP, #+4]
   \       0x90   0xF240 0x51DC      MOVW     R1,#+1500
   \       0x94   0x9100             STR      R1,[SP, #+0]
   \       0x96   0xF44F 0x63AF      MOV      R3,#+1400
   \       0x9A   0xF240 0x5214      MOVW     R2,#+1300
   \       0x9E   0xF44F 0x6196      MOV      R1,#+1200
   \       0xA2   0x....'....        BL       ANO_DT_Send_RCData
    537                break;
   \       0xA6   0xE01F             B.N      ??Anotc_SendData_7
    538              }
    539            case 4:
    540              {
    541                ANO_DT_Send_Power(20,57.63);
   \                     ??Anotc_SendData_5: (+1)
   \       0xA8   0x....             LDR.N    R1,??DataTable8_14  ;; 0x4266851f
   \       0xAA   0x....             LDR.N    R0,??DataTable8_15  ;; 0x41a00000
   \       0xAC   0x....'....        BL       ANO_DT_Send_Power
    542                break;
   \       0xB0   0xE01A             B.N      ??Anotc_SendData_7
    543              }
    544            case 5:
    545              {
    546                ANO_DT_Send_PWM_Motor(PWM_X,encoder_x,0,0,1500,1600,1700,1800);
   \                     ??Anotc_SendData_4: (+1)
   \       0xB2   0xF44F 0x60E1      MOV      R0,#+1800
   \       0xB6   0x9003             STR      R0,[SP, #+12]
   \       0xB8   0xF240 0x60A4      MOVW     R0,#+1700
   \       0xBC   0x9002             STR      R0,[SP, #+8]
   \       0xBE   0xF44F 0x60C8      MOV      R0,#+1600
   \       0xC2   0x9001             STR      R0,[SP, #+4]
   \       0xC4   0xF240 0x50DC      MOVW     R0,#+1500
   \       0xC8   0x9000             STR      R0,[SP, #+0]
   \       0xCA   0x2300             MOVS     R3,#+0
   \       0xCC   0x2200             MOVS     R2,#+0
   \       0xCE   0x....             LDR.N    R0,??DataTable8_13
   \       0xD0   0x6800             LDR      R0,[R0, #+0]
   \       0xD2   0x0001             MOVS     R1,R0
   \       0xD4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \       0xD6   0x....             LDR.N    R0,??DataTable8_16
   \       0xD8   0x6800             LDR      R0,[R0, #+0]
   \       0xDA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0xDC   0x....'....        BL       ANO_DT_Send_PWM_Motor
    547                break;
   \       0xE0   0xE002             B.N      ??Anotc_SendData_7
    548              }
    549              /*
    550            case 6:
    551              {
    552              ANO_DT_Send_User(0,0,0,(1000-Motor1.out),(1000+Motor1.out),
    553              key.r,main_val,Mpu.deg_s.y,att.rol,acc_raw_f.z,
    554              0,0,0,0,0);
    555              break;
    556            }
    557              */
    558            case 6:
    559              {
    560                ANO_debug_cnt = 0;
   \                     ??Anotc_SendData_6: (+1)
   \       0xE2   0x2100             MOVS     R1,#+0
   \       0xE4   0x7001             STRB     R1,[R0, #+0]
    561                break;
   \       0xE6   0xE7FF             B.N      ??Anotc_SendData_7
    562              }
    563            default: break;
    564            }/*
    565            switch(ANO_debug_cnt)
    566            {
    567          case 1:
    568            {
    569            ANO_DT_Send_Status();
    570            break;
    571          }
    572          case 2:
    573            {
    574            ANO_DT_Send_Senser(acc_raw.x,acc_raw.y,acc_raw.z,gyro_raw.x,gyro_raw.y,gyro_raw.z,key.value,0,0);
    575            break;
    576          }
    577          case 3:
    578            {
    579            ANO_DT_Send_RCData(1100,1200,1300,1400,1500,1600,1700,1800,1900,1100);
    580            break;
    581          }
    582          case 4:
    583            {
    584            ANO_DT_Send_Power(13.52,57.63);
    585            break;
    586          }
    587          case 5:
    588            {
    589            ANO_DT_Send_PWM_Motor(1100,1200,1300,1400,1500,1600,1700,1800);
    590            break;
    591          }
    592          case 6:
    593            {
    594            ANO_DT_Send_User(0,0,0,(1000-Motor1.out),(1000+Motor1.out),
    595            key.r,main_val,Mpu.deg_s.y,att.rol,acc_raw_f.z,
    596            0,0,0,0,0);
    597            break;
    598          }
    599          case 7:
    600            {
    601            ANO_debug_cnt = 0;
    602            break;
    603          }
    604            default: break;
    605          }
    606            */
    607            
    608          }
   \                     ??Anotc_SendData_1: (+1)
   \                     ??Anotc_SendData_7: (+1)
   \       0xE8   0xB007             ADD      SP,SP,#+28
   \       0xEA   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 1
   \                     `Anotc_SendData::ANO_debug_cnt`:
   \        0x0                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x4002'64B8        DC32     0x400264b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x2800'8000        DC32     0x28008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x....'....        DC32     usart1_sent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x....'....        DC32     usart1_dma_tx_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x4001'1004        DC32     0x40011004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x....'....        DC32     data_to_send

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \        0x0   0x....'....        DC32     att

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \        0x0   0x....'....        DC32     `Anotc_SendData::ANO_debug_cnt`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \        0x0   0x....'....        DC32     acc_raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \        0x0   0x....'....        DC32     Mpu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \        0x0   0x....'....        DC32     encoder_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \        0x0   0x4266'851F        DC32     0x4266851f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \        0x0   0x41A0'0000        DC32     0x41a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \        0x0   0x....'....        DC32     PWM_X
    609          
    610          
    611          
    612          
    613          
    614          
    615          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ANO_DT_Send_PWM_Motor
        32   -> usart1_send
      24   ANO_DT_Send_Power
        24   -> __aeabi_f2iz
        24   -> __aeabi_fmul
        24   -> usart1_send
      32   ANO_DT_Send_RCData
        32   -> usart1_send
      24   ANO_DT_Send_Senser
        24   -> usart1_send
      24   ANO_DT_Send_Status
        24   -> __aeabi_f2iz
        24   -> __aeabi_fmul
        24   -> usart1_send
      40   Anotc_SendData
        40   -> ANO_DT_Send_PWM_Motor
        40   -> ANO_DT_Send_Power
        40   -> ANO_DT_Send_RCData
        40   -> ANO_DT_Send_Senser
        40   -> ANO_DT_Send_Status
        40   -> __aeabi_f2iz
       8   DMA2_Stream7_IRQHandler
         8   -> DMA_ClearFlag
         8   -> DMA_Cmd
         8   -> DMA_GetITStatus
      80   dma_tx_config
        80   -> DMA_DeInit
        80   -> DMA_ITConfig
        80   -> DMA_Init
        80   -> RCC_AHB1PeriphClockCmd
      40   usart1_init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> USART_Cmd
        40   -> USART_DMACmd
        40   -> USART_ITConfig
        40   -> USART_Init
        40   -> dma_tx_config
      16   usart1_send
        16   -> DMA_Cmd
        16   -> DMA_SetCurrDataCounter
        16   -> mymemcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     292  ANO_DT_Send_PWM_Motor
     180  ANO_DT_Send_Power
     344  ANO_DT_Send_RCData
     376  ANO_DT_Send_Senser
     304  ANO_DT_Send_Status
       1  ANO_debug_cnt
     236  Anotc_SendData
      48  DMA2_Stream7_IRQHandler
     100  data_to_send
     112  dma_tx_config
    1024  usart1_dma_rx_buf
    1024  usart1_dma_tx_buf
     218  usart1_init
      70  usart1_send
       1  usart1_sent

 
 2'149 bytes in section .bss
     1 byte  in section .data
 2'248 bytes in section .text
 
 2'248 bytes of CODE memory
 2'150 bytes of DATA memory

Errors: none
Warnings: 4
