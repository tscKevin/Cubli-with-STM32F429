###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2020  16:53:46
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  E:\STM32Project\Cubli-with-STM32F429\Cubli\User\src\pwm.c
#    Command line =
#        -f C:\Users\LABPC1~1\AppData\Local\Temp\EWC135.tmp
#        (E:\STM32Project\Cubli-with-STM32F429\Cubli\User\src\pwm.c -D
#        USE_STDPERIPH_DRIVER -D STM32F429_439xx -lC
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\Debug\List -o
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "D:\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\
#        -I
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\iar\
#        -I
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\..\STM32F4xx_DSP_StdPeriph_Lib_V1.8.0\Libraries\STM32F4xx_StdPeriph_Driver\src\
#        -I E:\STM32Project\Cubli-with-STM32F429\Cubli\user\inc\ -I
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\user\src\ -Ol
#        --use_c++_inline -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "D:\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        E:\STM32Project\Cubli-with-STM32F429\Cubli\Debug\List\pwm.lst
#    Object file  =  E:\STM32Project\Cubli-with-STM32F429\Cubli\Debug\Obj\pwm.o
#
###############################################################################

E:\STM32Project\Cubli-with-STM32F429\Cubli\User\src\pwm.c
      1          #include "pwm.h"
      2          /*=========================================================
      3          
      4          
      5          TIM2 pwm PA0、PA1、PA2、PA3
      6          
      7          =========================================================*/
      8          

   \                                 In section .text, align 2, keep-with-next
      9          void TM2_PWM_Init(void){
   \                     TM2_PWM_Init: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB08A             SUB      SP,SP,#+40
     10              GPIO_InitTypeDef GPIO_InitStruct;
     11              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0x....'....        BL       RCC_AHB1PeriphClockCmd
     12              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0x....'....        BL       RCC_AHB1PeriphClockCmd
     13              /* Alternating functions for pins 原本在PB*/
     14              GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2); // chl_1
   \       0x14   0x....'....        LDR.W    R5,??DataTable7  ;; 0x40020000
   \       0x18   0x2201             MOVS     R2,#+1
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x0028             MOVS     R0,R5
   \       0x1E   0x....'....        BL       GPIO_PinAFConfig
     15              //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);  // chl_2
     16              //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);  // chl_3
     17              //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_TIM2);  // chl_4
     18              
     19              //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_TIM2);  // chl_1
     20              GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_TIM2);  // chl_3
   \       0x22   0x....'....        LDR.W    R4,??DataTable7_1  ;; 0x40020400
   \       0x26   0x2201             MOVS     R2,#+1
   \       0x28   0x210A             MOVS     R1,#+10
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x....'....        BL       GPIO_PinAFConfig
     21              GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);  // chl_4
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x210B             MOVS     R1,#+11
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x....'....        BL       GPIO_PinAFConfig
     22              
     23              GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;//; | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0x9000             STR      R0,[SP, #+0]
     24              GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xF88D 0x0006      STRB     R0,[SP, #+6]
     25              GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0xF88D 0x0007      STRB     R0,[SP, #+7]
     26              GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
   \       0x4A   0x2002             MOVS     R0,#+2
   \       0x4C   0xF88D 0x0004      STRB     R0,[SP, #+4]
     27              GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x50   0x2002             MOVS     R0,#+2
   \       0x52   0xF88D 0x0005      STRB     R0,[SP, #+5]
     28              GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0x56   0x4669             MOV      R1,SP
   \       0x58   0x0028             MOVS     R0,R5
   \       0x5A   0x....'....        BL       GPIO_Init
     29              
     30              GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
   \       0x5E   0xF44F 0x6040      MOV      R0,#+3072
   \       0x62   0x9000             STR      R0,[SP, #+0]
     31              GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xF88D 0x0006      STRB     R0,[SP, #+6]
     32              GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \       0x6A   0x2000             MOVS     R0,#+0
   \       0x6C   0xF88D 0x0007      STRB     R0,[SP, #+7]
     33              GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
   \       0x70   0x2002             MOVS     R0,#+2
   \       0x72   0xF88D 0x0004      STRB     R0,[SP, #+4]
     34              GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x76   0x2002             MOVS     R0,#+2
   \       0x78   0xF88D 0x0005      STRB     R0,[SP, #+5]
     35              GPIO_Init(GPIOB, &GPIO_InitStruct);
   \       0x7C   0x4669             MOV      R1,SP
   \       0x7E   0x0020             MOVS     R0,R4
   \       0x80   0x....'....        BL       GPIO_Init
     36              //Initialize TIM2
     37              TIM_TimeBaseInitTypeDef TIM_BaseStruct;
     38              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
   \       0x84   0x2101             MOVS     R1,#+1
   \       0x86   0x2001             MOVS     R0,#+1
   \       0x88   0x....'....        BL       RCC_APB1PeriphClockCmd
     39              TIM_BaseStruct.TIM_Prescaler =90-1;//timer_tick_frequency = Timer_default_frequency / (prescaller_set + 1) 
   \       0x8C   0x2059             MOVS     R0,#+89
   \       0x8E   0xF8AD 0x001C      STRH     R0,[SP, #+28]
     40              TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \       0x92   0x2000             MOVS     R0,#+0
   \       0x94   0xF8AD 0x001E      STRH     R0,[SP, #+30]
     41              TIM_BaseStruct.TIM_Period=20000-1;//PWM_frequency = timer_tick_frequency / (TIM_Period + 1) ==> TIM_Period = timer_tick_frequency / PWM_frequency - 1
   \       0x98   0xF644 0x601F      MOVW     R0,#+19999
   \       0x9C   0x9008             STR      R0,[SP, #+32]
     42              TIM_BaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
   \       0x9E   0x2000             MOVS     R0,#+0
   \       0xA0   0xF8AD 0x0024      STRH     R0,[SP, #+36]
     43              TIM_BaseStruct.TIM_RepetitionCounter=0;
   \       0xA4   0x2000             MOVS     R0,#+0
   \       0xA6   0xF88D 0x0026      STRB     R0,[SP, #+38]
     44              TIM_TimeBaseInit(TIM2, &TIM_BaseStruct);
   \       0xAA   0xA907             ADD      R1,SP,#+28
   \       0xAC   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xB0   0x....'....        BL       TIM_TimeBaseInit
     45              
     46              TIM_OCInitTypeDef TIM_OCStruct;
     47              TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM1;
   \       0xB4   0x2060             MOVS     R0,#+96
   \       0xB6   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     48              TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
   \       0xBA   0x2001             MOVS     R0,#+1
   \       0xBC   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     49              TIM_OCStruct.TIM_OCPolarity  = TIM_OCPolarity_High;
   \       0xC0   0x2000             MOVS     R0,#+0
   \       0xC2   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     50              /*pulse_length = ((TIM_Period + 1) * DutyCycle) / 100 - 1
     51              25% duty cycle:      pulse_length = ((8399 + 1) * 25) / 100 - 1 = 2099
     52              50% duty cycle:      pulse_length = ((8399 + 1) * 50) / 100 - 1 = 4199
     53              75% duty cycle:      pulse_length = ((8399 + 1) * 75) / 100 - 1 = 6299
     54              100% duty cycle:    pulse_length = ((8399 + 1) * 100) / 100 - 1 = 8399*/
     55              TIM_OCStruct.TIM_Pulse=0;
   \       0xC6   0x2000             MOVS     R0,#+0
   \       0xC8   0x9004             STR      R0,[SP, #+16]
     56              TIM_OC1Init(TIM2, &TIM_OCStruct);
   \       0xCA   0xA902             ADD      R1,SP,#+8
   \       0xCC   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xD0   0x....'....        BL       TIM_OC1Init
     57              TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
   \       0xD4   0x2108             MOVS     R1,#+8
   \       0xD6   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xDA   0x....'....        BL       TIM_OC1PreloadConfig
     58              //  //  
     59              //  TIM_OCStruct.TIM_Pulse=0;
     60              //  TIM_OC2Init(TIM2, &TIM_OCStruct);
     61              //  TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
     62              //  
     63              TIM_OCStruct.TIM_Pulse=0;
   \       0xDE   0x2000             MOVS     R0,#+0
   \       0xE0   0x9004             STR      R0,[SP, #+16]
     64              TIM_OC3Init(TIM2, &TIM_OCStruct);
   \       0xE2   0xA902             ADD      R1,SP,#+8
   \       0xE4   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xE8   0x....'....        BL       TIM_OC3Init
     65              TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
   \       0xEC   0x2108             MOVS     R1,#+8
   \       0xEE   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xF2   0x....'....        BL       TIM_OC3PreloadConfig
     66              //  
     67              TIM_OCStruct.TIM_Pulse=0;
   \       0xF6   0x2000             MOVS     R0,#+0
   \       0xF8   0x9004             STR      R0,[SP, #+16]
     68              TIM_OC4Init(TIM2, &TIM_OCStruct);
   \       0xFA   0xA902             ADD      R1,SP,#+8
   \       0xFC   0xF05F 0x4080      MOVS     R0,#+1073741824
   \      0x100   0x....'....        BL       TIM_OC4Init
     69              TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
   \      0x104   0x2108             MOVS     R1,#+8
   \      0x106   0xF05F 0x4080      MOVS     R0,#+1073741824
   \      0x10A   0x....'....        BL       TIM_OC4PreloadConfig
     70              
     71              TIM_Cmd(TIM2,ENABLE);
   \      0x10E   0x2101             MOVS     R1,#+1
   \      0x110   0xF05F 0x4080      MOVS     R0,#+1073741824
   \      0x114   0x....'....        BL       TIM_Cmd
     72              //  TIM_CtrlPWMOutputs(TIM2,ENABLE);
     73          }
   \      0x118   0xB00B             ADD      SP,SP,#+44
   \      0x11A   0xBD30             POP      {R4,R5,PC}       ;; return
     74          /*=========================================================
     75          
     76          
     77          TIM3 pwm PC6、PC7、PC8、PC9
     78          
     79          =========================================================*/
     80          
     81          //void TM3_PWM_Init(void){
     82          //  GPIO_InitTypeDef GPIO_InitStruct;
     83          //  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
     84          //  /* Alternating functions for pins 原本在PC 6 7 8 9*/
     85          //  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM3);
     86          //  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM3);
     87          //  /*PB 
     88          //  // tim3 ch3、4 at PB GPIO_Pin_0  GPIO_Pin_1;
     89          //  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_TIM3);
     90          //  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_TIM3);
     91          //  */
     92          //  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;//GPIO_Pin_8 | GPIO_Pin_9
     93          //  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
     94          //  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
     95          //  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
     96          //  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
     97          //  GPIO_Init(GPIOC, &GPIO_InitStruct);
     98          //  
     99          //  //Initialize TIM3
    100          //  TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    101          //  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    102          //  TIM_BaseStruct.TIM_Prescaler =0;//timer_tick_frequency = Timer_default_frequency / (prescaller_set + 1) 
    103          //  TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    104          //  TIM_BaseStruct.TIM_Period=8399;//PWM_frequency = timer_tick_frequency / (TIM_Period + 1) ==> TIM_Period = timer_tick_frequency / PWM_frequency - 1
    105          //  TIM_BaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
    106          //  TIM_BaseStruct.TIM_RepetitionCounter=0;
    107          //  TIM_TimeBaseInit(TIM3, &TIM_BaseStruct);
    108          //  TIM_Cmd(TIM3,ENABLE);
    109          //  
    110          //  //Initialize PWM
    111          //  TIM_OCInitTypeDef TIM_OCStruct;
    112          //  /* PWM mode 2 = Clear on compare match */
    113          //  /* PWM mode 1 = Set on compare match */
    114          //  TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
    115          //  TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
    116          //  TIM_OCStruct.TIM_OCPolarity  = TIM_OCPolarity_High;
    117          //  /*pulse_length = ((TIM_Period + 1) * DutyCycle) / 100 - 1
    118          //  25% duty cycle:      pulse_length = ((8399 + 1) * 25) / 100 - 1 = 2099
    119          //  50% duty cycle:      pulse_length = ((8399 + 1) * 50) / 100 - 1 = 4199
    120          //  75% duty cycle:      pulse_length = ((8399 + 1) * 75) / 100 - 1 = 6299
    121          //  100% duty cycle:    pulse_length = ((8399 + 1) * 100) / 100 - 1 = 8399*/
    122          //  TIM_OCStruct.TIM_Pulse=2099;
    123          //  TIM_OC1Init(TIM3, &TIM_OCStruct);
    124          //  TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
    125          //  
    126          //  TIM_OCStruct.TIM_Pulse=4199;
    127          //  TIM_OC2Init(TIM3, &TIM_OCStruct);
    128          //  TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
    129          //  
    130          //  /*TIM_OCStruct.TIM_Pulse=6299;
    131          //  TIM_OC3Init(TIM3, &TIM_OCStruct);
    132          //  TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
    133          //  
    134          //  TIM_OCStruct.TIM_Pulse=8399;
    135          //  TIM_OC4Init(TIM3, &TIM_OCStruct);
    136          //  TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);*/
    137          //}
    138          
    139          /*=========================================================
    140          
    141          
    142          TIM4 pwm PB6、PB7、PB8、PB9 or PD12、PD13、PD14、PD15
    143          
    144          =========================================================*/
    145          //
    146          //void TM4_PWM_Init(void){
    147          //  GPIO_InitTypeDef GPIO_InitStruct;
    148          //  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    149          //  /* Alternating functions for pins 原本在PB*/
    150          //  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
    151          //  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
    152          //  /*
    153          //  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
    154          //  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
    155          //  */
    156          //  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;// | GPIO_Pin_14 | GPIO_Pin_15;
    157          //  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
    158          //  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
    159          //  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
    160          //  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
    161          //  GPIO_Init(GPIOD, &GPIO_InitStruct);
    162          //  //Initialize TIM4
    163          //  TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    164          //  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    165          //  TIM_BaseStruct.TIM_Prescaler =0;//timer_tick_frequency = Timer_default_frequency / (prescaller_set + 1) 
    166          //  TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    167          //  TIM_BaseStruct.TIM_Period=8399;//PWM_frequency = timer_tick_frequency / (TIM_Period + 1) ==> TIM_Period = timer_tick_frequency / PWM_frequency - 1
    168          //  TIM_BaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
    169          //  TIM_BaseStruct.TIM_RepetitionCounter=0;
    170          //  TIM_TimeBaseInit(TIM4, &TIM_BaseStruct);
    171          //  TIM_Cmd(TIM4,ENABLE);
    172          //  TIM_OCInitTypeDef TIM_OCStruct;
    173          //  /* PWM mode 2 = Clear on compare match */
    174          //  /* PWM mode 1 = Set on compare match */
    175          //  TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
    176          //  TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
    177          //  TIM_OCStruct.TIM_OCPolarity  = TIM_OCPolarity_High;
    178          //  /*pulse_length = ((TIM_Period + 1) * DutyCycle) / 100 - 1
    179          //  25% duty cycle:      pulse_length = ((8399 + 1) * 25) / 100 - 1 = 2099
    180          //  50% duty cycle:      pulse_length = ((8399 + 1) * 50) / 100 - 1 = 4199
    181          //  75% duty cycle:      pulse_length = ((8399 + 1) * 75) / 100 - 1 = 6299
    182          //  100% duty cycle:    pulse_length = ((8399 + 1) * 100) / 100 - 1 = 8399*/
    183          //  TIM_OCStruct.TIM_Pulse=2099;
    184          //  TIM_OC1Init(TIM4, &TIM_OCStruct);
    185          //  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
    186          //  
    187          //  TIM_OCStruct.TIM_Pulse=4199;
    188          //  TIM_OC2Init(TIM4, &TIM_OCStruct);
    189          //  TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
    190          //  
    191          //  /*TIM_OCStruct.TIM_Pulse=6299;
    192          //  TIM_OC3Init(TIM4, &TIM_OCStruct);
    193          //  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
    194          //  
    195          //  TIM_OCStruct.TIM_Pulse=8399;
    196          //  TIM_OC4Init(TIM4, &TIM_OCStruct);
    197          //  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);*/
    198          //}
    199          
    200          
    201          /*=========================================================
    202          
    203          
    204          TIM5 pwm PA0、PA1、PA2、PA3
    205          
    206          =========================================================*/
    207          
    208          //void TM5_PWM_Init(void){
    209          //  GPIO_InitTypeDef GPIO_InitStruct;
    210          //  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    211          //  /* Alternating functions for pins 原本在PB*/
    212          //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM5);
    213          //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM5);
    214          //  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM5);
    215          ////  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_TIM5);
    216          //  
    217          //  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;// | GPIO_Pin_3;
    218          //  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
    219          //  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
    220          //  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
    221          //  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
    222          //  GPIO_Init(GPIOA, &GPIO_InitStruct);
    223          //  //Initialize TIM5
    224          //  TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    225          //  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
    226          //  TIM_BaseStruct.TIM_Prescaler =0;//timer_tick_frequency = Timer_default_frequency / (prescaller_set + 1) 
    227          //  TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    228          //  TIM_BaseStruct.TIM_Period=9000-1;//PWM_frequency = timer_tick_frequency / (TIM_Period + 1) ==> TIM_Period = timer_tick_frequency / PWM_frequency - 1
    229          //  TIM_BaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
    230          //  TIM_BaseStruct.TIM_RepetitionCounter=0;
    231          //  TIM_TimeBaseInit(TIM5, &TIM_BaseStruct);
    232          //  
    233          //  TIM_OCInitTypeDef TIM_OCStruct;
    234          //  TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
    235          //  TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
    236          //  TIM_OCStruct.TIM_OCPolarity  = TIM_OCPolarity_High;
    237          //  /*pulse_length = ((TIM_Period + 1) * DutyCycle) / 100 - 1
    238          //  25% duty cycle:      pulse_length = ((8399 + 1) * 25) / 100 - 1 = 2099
    239          //  50% duty cycle:      pulse_length = ((8399 + 1) * 50) / 100 - 1 = 4199
    240          //  75% duty cycle:      pulse_length = ((8399 + 1) * 75) / 100 - 1 = 6299
    241          //  100% duty cycle:    pulse_length = ((8399 + 1) * 100) / 100 - 1 = 8399*/
    242          //  TIM_OCStruct.TIM_Pulse=0;
    243          //  TIM_OC1Init(TIM5, &TIM_OCStruct);
    244          //  TIM_OC1PreloadConfig(TIM5, TIM_OCPreload_Enable);
    245          //  
    246          //  TIM_OCStruct.TIM_Pulse=0;
    247          //  TIM_OC2Init(TIM5, &TIM_OCStruct);
    248          //  TIM_OC2PreloadConfig(TIM5, TIM_OCPreload_Enable);
    249          //  //  
    250          //  TIM_OCStruct.TIM_Pulse=0;
    251          //  TIM_OC3Init(TIM5, &TIM_OCStruct);
    252          //  TIM_OC3PreloadConfig(TIM5, TIM_OCPreload_Enable);
    253          //  
    254          ////  TIM_OCStruct.TIM_Pulse=0;
    255          ////  TIM_OC4Init(TIM5, &TIM_OCStruct);
    256          ////  TIM_OC4PreloadConfig(TIM5, TIM_OCPreload_Enable);
    257          //  TIM_Cmd(TIM5,ENABLE);
    258          //}*/
    259          
    260          /*=========================================================
    261          
    262          
    263          TIM8 pwm PC6、PC7、PC8
    264          
    265          =========================================================*/
    266          

   \                                 In section .text, align 2, keep-with-next
    267          void TM8_PWM_Init(void){
   \                     TM8_PWM_Init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB08A             SUB      SP,SP,#+40
    268              GPIO_InitTypeDef GPIO_InitStructure;
    269              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x2004             MOVS     R0,#+4
   \        0x8   0x....'....        BL       RCC_AHB1PeriphClockCmd
    270              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \        0xC   0x2002             MOVS     R0,#+2
   \        0xE   0xF88D 0x0004      STRB     R0,[SP, #+4]
    271              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF88D 0x0006      STRB     R0,[SP, #+6]
    272              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;// | GPIO_Pin_9;
   \       0x18   0xF44F 0x70E0      MOV      R0,#+448
   \       0x1C   0x9000             STR      R0,[SP, #+0]
    273              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF88D 0x0007      STRB     R0,[SP, #+7]
    274              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \       0x24   0x2003             MOVS     R0,#+3
   \       0x26   0xF88D 0x0005      STRB     R0,[SP, #+5]
    275              GPIO_Init(GPIOC,&GPIO_InitStructure);
   \       0x2A   0x....             LDR.N    R4,??DataTable7_2  ;; 0x40020800
   \       0x2C   0x4669             MOV      R1,SP
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x....'....        BL       GPIO_Init
    276              
    277              GPIO_PinAFConfig(GPIOC,GPIO_PinSource6,GPIO_AF_TIM8);
   \       0x34   0x2203             MOVS     R2,#+3
   \       0x36   0x2106             MOVS     R1,#+6
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x....'....        BL       GPIO_PinAFConfig
    278              GPIO_PinAFConfig(GPIOC,GPIO_PinSource7,GPIO_AF_TIM8);
   \       0x3E   0x2203             MOVS     R2,#+3
   \       0x40   0x2107             MOVS     R1,#+7
   \       0x42   0x0020             MOVS     R0,R4
   \       0x44   0x....'....        BL       GPIO_PinAFConfig
    279              GPIO_PinAFConfig(GPIOC,GPIO_PinSource8,GPIO_AF_TIM8);
   \       0x48   0x2203             MOVS     R2,#+3
   \       0x4A   0x2108             MOVS     R1,#+8
   \       0x4C   0x0020             MOVS     R0,R4
   \       0x4E   0x....'....        BL       GPIO_PinAFConfig
    280              //  GPIO_PinAFConfig(GPIOC,GPIO_PinSource9,GPIO_AF_TIM8);
    281              RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8,ENABLE);
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x2002             MOVS     R0,#+2
   \       0x56   0x....'....        BL       RCC_APB2PeriphClockCmd
    282              //时基初始化
    283              TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
    284              TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; //死区控制用。
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xF8AD 0x0024      STRH     R0,[SP, #+36]
    285              TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;  //计数器方向
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    286              TIM_TimeBaseInitStructure.TIM_Prescaler = 1;   //Timer clock = sysclock /(TIM_Prescaler+1) = 180M
   \       0x66   0x2001             MOVS     R0,#+1
   \       0x68   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    287              TIM_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0xF88D 0x0026      STRB     R0,[SP, #+38]
    288              TIM_TimeBaseInitStructure.TIM_Period = 9000 - 1;    //Period = (TIM counter clock / TIM output clock) - 1 = 10K
   \       0x72   0xF242 0x3027      MOVW     R0,#+8999
   \       0x76   0x9008             STR      R0,[SP, #+32]
    289              TIM_TimeBaseInit(TIM8,&TIM_TimeBaseInitStructure);
   \       0x78   0x....             LDR.N    R4,??DataTable7_3  ;; 0x40010400
   \       0x7A   0xA907             ADD      R1,SP,#+28
   \       0x7C   0x0020             MOVS     R0,R4
   \       0x7E   0x....'....        BL       TIM_TimeBaseInit
    290              
    291              
    292              TIM_OCInitTypeDef TIM_OCInitStructure;
    293              TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
   \       0x82   0x2070             MOVS     R0,#+112
   \       0x84   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    294              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x88   0x2001             MOVS     R0,#+1
   \       0x8A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    295              TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
   \       0x8E   0x2004             MOVS     R0,#+4
   \       0x90   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    296              
    297              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x94   0x2000             MOVS     R0,#+0
   \       0x96   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    298              TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCPolarity_High;
   \       0x9A   0x2000             MOVS     R0,#+0
   \       0x9C   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    299              TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
   \       0xA0   0xF44F 0x7080      MOV      R0,#+256
   \       0xA4   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    300              TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
   \       0xA8   0x2000             MOVS     R0,#+0
   \       0xAA   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    301              
    302              TIM_OCInitStructure.TIM_Pulse = 0;
   \       0xAE   0x2000             MOVS     R0,#+0
   \       0xB0   0x9004             STR      R0,[SP, #+16]
    303              TIM_OC1Init(TIM8,&TIM_OCInitStructure);
   \       0xB2   0xA902             ADD      R1,SP,#+8
   \       0xB4   0x0020             MOVS     R0,R4
   \       0xB6   0x....'....        BL       TIM_OC1Init
    304              
    305              TIM_OCInitStructure.TIM_Pulse = 0;
   \       0xBA   0x2000             MOVS     R0,#+0
   \       0xBC   0x9004             STR      R0,[SP, #+16]
    306              TIM_OC2Init(TIM8,&TIM_OCInitStructure);
   \       0xBE   0xA902             ADD      R1,SP,#+8
   \       0xC0   0x0020             MOVS     R0,R4
   \       0xC2   0x....'....        BL       TIM_OC2Init
    307              
    308              TIM_OCInitStructure.TIM_Pulse = 0;
   \       0xC6   0x2000             MOVS     R0,#+0
   \       0xC8   0x9004             STR      R0,[SP, #+16]
    309              TIM_OC3Init(TIM8,&TIM_OCInitStructure);
   \       0xCA   0xA902             ADD      R1,SP,#+8
   \       0xCC   0x0020             MOVS     R0,R4
   \       0xCE   0x....'....        BL       TIM_OC3Init
    310              
    311              //  TIM_OCInitStructure.TIM_Pulse = 2400;
    312              //  TIM_OC4Init(TIM8,&TIM_OCInitStructure);
    313              
    314              TIM_Cmd(TIM8,ENABLE);
   \       0xD2   0x2101             MOVS     R1,#+1
   \       0xD4   0x0020             MOVS     R0,R4
   \       0xD6   0x....'....        BL       TIM_Cmd
    315              TIM_CtrlPWMOutputs(TIM8,ENABLE);
   \       0xDA   0x2101             MOVS     R1,#+1
   \       0xDC   0x0020             MOVS     R0,R4
   \       0xDE   0x....'....        BL       TIM_CtrlPWMOutputs
    316          }
   \       0xE2   0xB00A             ADD      SP,SP,#+40
   \       0xE4   0xBD10             POP      {R4,PC}          ;; return
    317          
    318          /*=========================================================
    319          
    320          
    321          TIM3 EncoderInterface pwm PA6、PA7
    322          TIM1 EncoderInterface pwm PA8、PA9
    323          TIM4 EncoderInterface pwm PB6、PB7
    324          
    325          =========================================================*/
    326          
    327          

   \                                 In section .text, align 2, keep-with-next
    328          int read_Encoder_a(void){
    329              int Encoder_a = 0;
   \                     read_Encoder_a: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
    330              Encoder_a = (short)TIM3->CNT; //因為設定是65535 所以用short來將逆向的馬達計數轉為負號
   \        0x2   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40000424
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
    331              TIM3->CNT = 0;
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x600A             STR      R2,[R1, #+0]
    332              return Encoder_a ;
   \        0xC   0x4770             BX       LR               ;; return
    333          }

   \                                 In section .text, align 2, keep-with-next
    334          int read_Encoder_c(void){
    335              int Encoder_a = 0;
   \                     read_Encoder_c: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
    336              Encoder_a = (short)TIM4->CNT; //因為設定是65535 所以用short來將逆向的馬達計數轉為負號
   \        0x2   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40000824
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
    337              TIM4->CNT = 0;
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x600A             STR      R2,[R1, #+0]
    338              return Encoder_a ;
   \        0xC   0x4770             BX       LR               ;; return
    339          }

   \                                 In section .text, align 2, keep-with-next
    340          int read_Encoder_b(void){
    341              int Encoder_a = 0;
   \                     read_Encoder_b: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
    342              Encoder_a = (short)TIM1->CNT; //因為設定是65535 所以用short來將逆向的馬達計數轉為負號
   \        0x2   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40010024
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
    343              TIM1->CNT = 0;
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x600A             STR      R2,[R1, #+0]
    344              return Encoder_a ;
   \        0xC   0x4770             BX       LR               ;; return
    345          }
    346          
    347          //EncoderInterface

   \                                 In section .text, align 2, keep-with-next
    348          void TIM3_EncoderInterface_Init(void) {
   \                     TIM3_EncoderInterface_Init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
    349              GPIO_InitTypeDef GPIO_InitStructure;
    350              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x2002             MOVS     R0,#+2
   \        0x8   0x....'....        BL       RCC_APB1PeriphClockCmd
    351              // GPIOB Clock Enable
    352              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0x....'....        BL       RCC_AHB1PeriphClockCmd
    353              // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    354              GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
   \       0x14   0x20C0             MOVS     R0,#+192
   \       0x16   0x9000             STR      R0,[SP, #+0]
    355              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
   \       0x18   0x2002             MOVS     R0,#+2
   \       0x1A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    356              GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
   \       0x1E   0x2003             MOVS     R0,#+3
   \       0x20   0xF88D 0x0005      STRB     R0,[SP, #+5]
    357              GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF88D 0x0006      STRB     R0,[SP, #+6]
    358              GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0xF88D 0x0007      STRB     R0,[SP, #+7]
    359              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x30   0x....             LDR.N    R4,??DataTable7  ;; 0x40020000
   \       0x32   0x4669             MOV      R1,SP
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x....'....        BL       GPIO_Init
    360              
    361              // Assign Alternate Functions to pins
    362              GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
   \       0x3A   0x2202             MOVS     R2,#+2
   \       0x3C   0x2106             MOVS     R1,#+6
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x....'....        BL       GPIO_PinAFConfig
    363              GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM3);
   \       0x44   0x2202             MOVS     R2,#+2
   \       0x46   0x2107             MOVS     R1,#+7
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x....'....        BL       GPIO_PinAFConfig
    364              
    365              TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
    366              TIM_TimeBaseInitStructure.TIM_Period =65535;  //reload value
   \       0x4E   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x52   0x9003             STR      R0,[SP, #+12]
    367              TIM_TimeBaseInitStructure.TIM_Prescaler=0;  //無分頻
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    368              TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    369              TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上計數
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    370              TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; 
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    371              TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStructure);
   \       0x6C   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40000400
   \       0x6E   0xA902             ADD      R1,SP,#+8
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x....'....        BL       TIM_TimeBaseInit
    372              
    373              
    374              TIM_ICInitTypeDef TIM_ICInitStructure;
    375              TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising ,TIM_ICPolarity_Rising); // 四分頻stm讀取encoder設置
   \       0x76   0x2300             MOVS     R3,#+0
   \       0x78   0x2200             MOVS     R2,#+0
   \       0x7A   0x2103             MOVS     R1,#+3
   \       0x7C   0x0020             MOVS     R0,R4
   \       0x7E   0x....'....        BL       TIM_EncoderInterfaceConfig
    376              TIM_ICStructInit(&TIM_ICInitStructure); 
   \       0x82   0xA805             ADD      R0,SP,#+20
   \       0x84   0x....'....        BL       TIM_ICStructInit
    377              TIM_ICInitStructure.TIM_ICFilter = 10;//濾波器值(從第10個訊號後才開始計數)
   \       0x88   0x200A             MOVS     R0,#+10
   \       0x8A   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    378              TIM_ICInit(TIM3, &TIM_ICInitStructure);
   \       0x8E   0xA905             ADD      R1,SP,#+20
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0x....'....        BL       TIM_ICInit
    379              
    380              TIM_ClearFlag(TIM3, TIM_FLAG_Update);//清除TIM3的更新旗標
   \       0x96   0x2101             MOVS     R1,#+1
   \       0x98   0x0020             MOVS     R0,R4
   \       0x9A   0x....'....        BL       TIM_ClearFlag
    381              TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);//運行更新
   \       0x9E   0x2201             MOVS     R2,#+1
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x....'....        BL       TIM_ITConfig
    382              //IM3定時器
    383              
    384              //  NVIC_InitTypeDef NVIC_InitStructure;    
    385              //  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);           
    386              //  
    387              //  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;    
    388              //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;               
    389              //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    390              //  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            
    391              //  NVIC_Init(&NVIC_InitStructure);
    392              TIM_SetCounter(TIM3,0); //TIM3->CNT=0
   \       0xA8   0x2100             MOVS     R1,#+0
   \       0xAA   0x0020             MOVS     R0,R4
   \       0xAC   0x....'....        BL       TIM_SetCounter
    393              TIM_Cmd(TIM3, ENABLE); 
   \       0xB0   0x2101             MOVS     R1,#+1
   \       0xB2   0x0020             MOVS     R0,R4
   \       0xB4   0x....'....        BL       TIM_Cmd
    394          }
   \       0xB8   0xB008             ADD      SP,SP,#+32
   \       0xBA   0xBD10             POP      {R4,PC}          ;; return
    395          //EncoderInterface

   \                                 In section .text, align 2, keep-with-next
    396          void TIM4_EncoderInterface_Init(void) {
   \                     TIM4_EncoderInterface_Init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
    397              GPIO_InitTypeDef GPIO_InitStructure;
    398              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x2004             MOVS     R0,#+4
   \        0x8   0x....'....        BL       RCC_APB1PeriphClockCmd
    399              // GPIOB Clock Enable
    400              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0x....'....        BL       RCC_AHB1PeriphClockCmd
    401              // Initalize PB14 (TIM4 Ch1) and PB15 (TIM4 Ch2)
    402              GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
   \       0x14   0x20C0             MOVS     R0,#+192
   \       0x16   0x9000             STR      R0,[SP, #+0]
    403              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
   \       0x18   0x2002             MOVS     R0,#+2
   \       0x1A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    404              GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
   \       0x1E   0x2003             MOVS     R0,#+3
   \       0x20   0xF88D 0x0005      STRB     R0,[SP, #+5]
    405              GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF88D 0x0006      STRB     R0,[SP, #+6]
    406              GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0xF88D 0x0007      STRB     R0,[SP, #+7]
    407              GPIO_Init(GPIOB, &GPIO_InitStructure);
   \       0x30   0x....             LDR.N    R4,??DataTable7_1  ;; 0x40020400
   \       0x32   0x4669             MOV      R1,SP
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x....'....        BL       GPIO_Init
    408              
    409              // Assign Alternate Functions to pins
    410              GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
   \       0x3A   0x2202             MOVS     R2,#+2
   \       0x3C   0x2106             MOVS     R1,#+6
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x....'....        BL       GPIO_PinAFConfig
    411              GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4);
   \       0x44   0x2202             MOVS     R2,#+2
   \       0x46   0x2107             MOVS     R1,#+7
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x....'....        BL       GPIO_PinAFConfig
    412              
    413              TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
    414              TIM_TimeBaseInitStructure.TIM_Period =65535;  //reload value
   \       0x4E   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x52   0x9003             STR      R0,[SP, #+12]
    415              TIM_TimeBaseInitStructure.TIM_Prescaler=0;  //無分頻
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    416              TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    417              TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上計數
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    418              TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; 
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    419              TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStructure);
   \       0x6C   0x....             LDR.N    R4,??DataTable7_8  ;; 0x40000800
   \       0x6E   0xA902             ADD      R1,SP,#+8
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x....'....        BL       TIM_TimeBaseInit
    420              
    421              
    422              TIM_ICInitTypeDef TIM_ICInitStructure;
    423              TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising ,TIM_ICPolarity_Rising); // 四分頻stm讀取encoder設置
   \       0x76   0x2300             MOVS     R3,#+0
   \       0x78   0x2200             MOVS     R2,#+0
   \       0x7A   0x2103             MOVS     R1,#+3
   \       0x7C   0x0020             MOVS     R0,R4
   \       0x7E   0x....'....        BL       TIM_EncoderInterfaceConfig
    424              TIM_ICStructInit(&TIM_ICInitStructure); 
   \       0x82   0xA805             ADD      R0,SP,#+20
   \       0x84   0x....'....        BL       TIM_ICStructInit
    425              TIM_ICInitStructure.TIM_ICFilter = 10;//濾波器值(從第10個訊號後才開始計數)
   \       0x88   0x200A             MOVS     R0,#+10
   \       0x8A   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    426              TIM_ICInit(TIM4, &TIM_ICInitStructure);
   \       0x8E   0xA905             ADD      R1,SP,#+20
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0x....'....        BL       TIM_ICInit
    427              
    428              TIM_ClearFlag(TIM4, TIM_FLAG_Update);//清除TIM4的更新旗標
   \       0x96   0x2101             MOVS     R1,#+1
   \       0x98   0x0020             MOVS     R0,R4
   \       0x9A   0x....'....        BL       TIM_ClearFlag
    429              TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);//運行更新
   \       0x9E   0x2201             MOVS     R2,#+1
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x....'....        BL       TIM_ITConfig
    430              //IM3定時器
    431              
    432              //  NVIC_InitTypeDef NVIC_InitStructure;    
    433              //  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);           
    434              //  
    435              //  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;    
    436              //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;               
    437              //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    438              //  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            
    439              //  NVIC_Init(&NVIC_InitStructure);
    440              TIM_SetCounter(TIM4,0); //TIM4->CNT=0
   \       0xA8   0x2100             MOVS     R1,#+0
   \       0xAA   0x0020             MOVS     R0,R4
   \       0xAC   0x....'....        BL       TIM_SetCounter
    441              TIM_Cmd(TIM4, ENABLE); 
   \       0xB0   0x2101             MOVS     R1,#+1
   \       0xB2   0x0020             MOVS     R0,R4
   \       0xB4   0x....'....        BL       TIM_Cmd
    442          }
   \       0xB8   0xB008             ADD      SP,SP,#+32
   \       0xBA   0xBD10             POP      {R4,PC}          ;; return
    443          //EncoderInterface

   \                                 In section .text, align 2, keep-with-next
    444          void TIM1_EncoderInterface_Init(void) {
   \                     TIM1_EncoderInterface_Init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
    445              GPIO_InitTypeDef GPIO_InitStructure;
    446              RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0x....'....        BL       RCC_APB2PeriphClockCmd
    447              // GPIOB Clock Enable
    448              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0x....'....        BL       RCC_AHB1PeriphClockCmd
    449              // Initalize PB5 (TIM1 Ch1) and PB6 (TIM1 Ch2)
    450              GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_8 | GPIO_Pin_9;
   \       0x14   0xF44F 0x7040      MOV      R0,#+768
   \       0x18   0x9000             STR      R0,[SP, #+0]
    451              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
   \       0x1A   0x2002             MOVS     R0,#+2
   \       0x1C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    452              GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
   \       0x20   0x2003             MOVS     R0,#+3
   \       0x22   0xF88D 0x0005      STRB     R0,[SP, #+5]
    453              GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF88D 0x0006      STRB     R0,[SP, #+6]
    454              GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xF88D 0x0007      STRB     R0,[SP, #+7]
    455              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x32   0x....             LDR.N    R4,??DataTable7  ;; 0x40020000
   \       0x34   0x4669             MOV      R1,SP
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x....'....        BL       GPIO_Init
    456              
    457              // Assign Alternate Functions to pins
    458              GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_TIM1);
   \       0x3C   0x2201             MOVS     R2,#+1
   \       0x3E   0x2108             MOVS     R1,#+8
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x....'....        BL       GPIO_PinAFConfig
    459              GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_TIM1);
   \       0x46   0x2201             MOVS     R2,#+1
   \       0x48   0x2109             MOVS     R1,#+9
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x....'....        BL       GPIO_PinAFConfig
    460              
    461              TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
    462              TIM_TimeBaseInitStructure.TIM_Period =65535;  //reload value
   \       0x50   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x54   0x9003             STR      R0,[SP, #+12]
    463              TIM_TimeBaseInitStructure.TIM_Prescaler=0;  //無分頻
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    464              TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    465              TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上計數
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    466              TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; 
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    467              TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStructure);
   \       0x6E   0x....             LDR.N    R4,??DataTable7_9  ;; 0x40010000
   \       0x70   0xA902             ADD      R1,SP,#+8
   \       0x72   0x0020             MOVS     R0,R4
   \       0x74   0x....'....        BL       TIM_TimeBaseInit
    468              
    469              
    470              TIM_ICInitTypeDef TIM_ICInitStructure;
    471              TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising ,TIM_ICPolarity_Rising); // 四分頻stm讀取encoder設置
   \       0x78   0x2300             MOVS     R3,#+0
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x2103             MOVS     R1,#+3
   \       0x7E   0x0020             MOVS     R0,R4
   \       0x80   0x....'....        BL       TIM_EncoderInterfaceConfig
    472              TIM_ICStructInit(&TIM_ICInitStructure); 
   \       0x84   0xA805             ADD      R0,SP,#+20
   \       0x86   0x....'....        BL       TIM_ICStructInit
    473              TIM_ICInitStructure.TIM_ICFilter = 10;//濾波器值(從第10個訊號後才開始計數)
   \       0x8A   0x200A             MOVS     R0,#+10
   \       0x8C   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    474              TIM_ICInit(TIM1, &TIM_ICInitStructure);
   \       0x90   0xA905             ADD      R1,SP,#+20
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0x....'....        BL       TIM_ICInit
    475              
    476              TIM_ClearFlag(TIM1, TIM_FLAG_Update);//清除TIM1的更新旗標
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x0020             MOVS     R0,R4
   \       0x9C   0x....'....        BL       TIM_ClearFlag
    477              TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);//運行更新
   \       0xA0   0x2201             MOVS     R2,#+1
   \       0xA2   0x2101             MOVS     R1,#+1
   \       0xA4   0x0020             MOVS     R0,R4
   \       0xA6   0x....'....        BL       TIM_ITConfig
    478              //IM3定時器
    479              
    480              //  NVIC_InitTypeDef NVIC_InitStructure;    
    481              //  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);           
    482              //  
    483              //  NVIC_InitStructure.NVIC_IRQChannel = TIM1_IRQn;    
    484              //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;               
    485              //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    486              //  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            
    487              //  NVIC_Init(&NVIC_InitStructure);
    488              TIM_SetCounter(TIM1,0); //TIM1->CNT=0
   \       0xAA   0x2100             MOVS     R1,#+0
   \       0xAC   0x0020             MOVS     R0,R4
   \       0xAE   0x....'....        BL       TIM_SetCounter
    489              TIM_Cmd(TIM1, ENABLE); 
   \       0xB2   0x2101             MOVS     R1,#+1
   \       0xB4   0x0020             MOVS     R0,R4
   \       0xB6   0x....'....        BL       TIM_Cmd
    490          }
   \       0xBA   0xB008             ADD      SP,SP,#+32
   \       0xBC   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x4002'0400        DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x4002'0800        DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4001'0400        DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x4000'0424        DC32     0x40000424

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x4000'0824        DC32     0x40000824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x4001'0024        DC32     0x40010024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x4001'0000        DC32     0x40010000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   TIM1_EncoderInterface_Init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> TIM_ClearFlag
        40   -> TIM_Cmd
        40   -> TIM_EncoderInterfaceConfig
        40   -> TIM_ICInit
        40   -> TIM_ICStructInit
        40   -> TIM_ITConfig
        40   -> TIM_SetCounter
        40   -> TIM_TimeBaseInit
      40   TIM3_EncoderInterface_Init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> TIM_ClearFlag
        40   -> TIM_Cmd
        40   -> TIM_EncoderInterfaceConfig
        40   -> TIM_ICInit
        40   -> TIM_ICStructInit
        40   -> TIM_ITConfig
        40   -> TIM_SetCounter
        40   -> TIM_TimeBaseInit
      40   TIM4_EncoderInterface_Init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> TIM_ClearFlag
        40   -> TIM_Cmd
        40   -> TIM_EncoderInterfaceConfig
        40   -> TIM_ICInit
        40   -> TIM_ICStructInit
        40   -> TIM_ITConfig
        40   -> TIM_SetCounter
        40   -> TIM_TimeBaseInit
      56   TM2_PWM_Init
        56   -> GPIO_Init
        56   -> GPIO_PinAFConfig
        56   -> RCC_AHB1PeriphClockCmd
        56   -> RCC_APB1PeriphClockCmd
        56   -> TIM_Cmd
        56   -> TIM_OC1Init
        56   -> TIM_OC1PreloadConfig
        56   -> TIM_OC3Init
        56   -> TIM_OC3PreloadConfig
        56   -> TIM_OC4Init
        56   -> TIM_OC4PreloadConfig
        56   -> TIM_TimeBaseInit
      48   TM8_PWM_Init
        48   -> GPIO_Init
        48   -> GPIO_PinAFConfig
        48   -> RCC_AHB1PeriphClockCmd
        48   -> RCC_APB2PeriphClockCmd
        48   -> TIM_Cmd
        48   -> TIM_CtrlPWMOutputs
        48   -> TIM_OC1Init
        48   -> TIM_OC2Init
        48   -> TIM_OC3Init
        48   -> TIM_TimeBaseInit
       0   read_Encoder_a
       0   read_Encoder_b
       0   read_Encoder_c


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     190  TIM1_EncoderInterface_Init
     188  TIM3_EncoderInterface_Init
     188  TIM4_EncoderInterface_Init
     284  TM2_PWM_Init
     230  TM8_PWM_Init
      14  read_Encoder_a
      14  read_Encoder_b
      14  read_Encoder_c

 
 1'162 bytes in section .text
 
 1'162 bytes of CODE memory

Errors: none
Warnings: none
